//----------------------------------------------------------------------------
//
//   GT Menu Script - Creates a menu to call scripts from the GT Tools Package
//   @Guilherme Trevisan - github.com/TrevisanGMW/gt-tools - 2020-03-03
//	 
//   1.2 - 2020-03-13
//   Added new scripts
//
//   1.3 - 2020-06-07
//   Updated the names of many scripts
//   Added a new category called "Shapes", and added new scripts to it.
//
//   1.4 - 2020-06-17
//	 Added Mirror Cluster Tool
//   Updated help dialog
//   Added icons
//
//   1.4.1 - 2020-06-24
//	 Added Render Farm Checklist
//
//   1.4.2 - 2020-06-26
//	 Added Renamer
//
//   1.4.3 - 2020-07-17
//	 Added Maya to Discord
//
//   1.4.4 ~ 1.4.5 - 2020-07-25
//	 Updated Render Farm Checklist
//   Added new category
//
//   1.4.6 - 2020-09-13
//	 Added GT Utilities
//
//   1.4.7 - 2020-10-17
//	 Minor fixes for the renamer script
//   Added new utilities to GT Utilities
//
//   1.4.8 - 2020-10-21
//   Added Uniform LRA Toggle
//   Organized GT Utilities
//   About menu build using Python now (It was moved to be inside the GT Utilities)
//
//   1.4.9 - 2020-10-23
//   Added icons to the main menu
//   Updated GT Renamer
//
//   1.5.0 - 2020-10-25
//   Fixed a few issues in GT Maya to Discord
//   Updated GT Selection Manager
//
//   1.5.1 - 2020-10-30
//   Minor updates
//
//   1.5.2 - 2020-11-03
//   Updated UI and added new functions to GT Maya to Discord
//   Added icon generator to main menu
//   Changed the name of a few scripts
//   Forced scripts to reload after import
//
//   1.5.3 - 2020-11-08
//   Updated script package to include setup.bat
//   Updated  "gt_menu.mel" to generate icons when file is missing.
//   Added Modeling submenu.
//   Added "gt_sphere_types.py".
//   Moved the copy/paste material functions to the modeling submenu.
//
//	 1.5.4
//	 Updated "Check for Updates" link.
//	 Fixed a typo in the "setup.bat"
//	 Fixed "Check for Updates" link to match the new repo name.
//	 Patched the uninstaller so it can be used from different drive letter.
//	 Added "gt_sphere_types.py" to the uninstaller.
//	 Created "gt_check_updates.py" to better handle updates.
//	 Changed the "Check For Updates" button in the main menu to call "gt_check_updates.py" instead of a link.
//	 Fixed issue where unloaded references wouldn't import when using "gtu_import_references" (#15)
//	 Added"gtu_remove_references" (#16)
//	 Added a missing reload to "gt_tools_menu.mel"
//
//	 1.5.5
//   Started storing changelog directly on github. Everything here is now about this menu specifically.
//   https://github.com/TrevisanGMW/gt-tools/releases
//	 Added "gtu_convert_bif_to_mesh"
//
//   1.5.6
//   Moved "gtu_convert_bif_to_mesh" to the modeling submenu
//   Added "gt_color_manager"
//
//   1.5.7
//	 Renamed "gt_create_ctrl_auto_fk" to "gt_create_auto_fk"
//	 Renamed "gt_create_ctrl_simple_IK_leg"	to "gt_create_ik_leg"
//   Added "gtu_delete_nucleus_nodes"
//
//   1.5.8
//   Added "gt_startup_booster"
//
//   1.5.9
//   Added "gt_path_manager"
//   Retired "gt_replace_reference_paths"
//
//   1.6.0
//   Moved uniform LRA toggle up to have all reference functions close to one another
//   Added Unlock Default Channels
//   Added Unhide Default Channels
//
//   1.6.1
//   Added a separator between utilities related to references
//   Added a silent auto update checker
//
//   1.6.2
//   Added fSpy Importer
//   Added icon management for fSpy Importer
//
//   1.6.3
//   Added Auto Biped Rigger
//   Removed Create IK Leg
//	 Updated Make IK Stretchy
//
//   1.6.4
//	 Only updated the version, no changes to the menu
//
//   1.6.5
//	 Added gtu_uniform_jnt_label_toggle to GT Utilities
//
//   1.6.6
//	 Updated icons for "GTU Uniform LRA Toggle" and "GTU Uniform Label Toggle" to avoid MacOS and Linux compatilibity issues.
//
//   1.6.7
//	 Added Add Sine Attributes
//
//   1.6.8
//	 Only updated the version, no changes to the menu
//
//   1.6.9
//	 Added GT Create Testing Keys
//
//   1.7.0
//	 No changes to this menu, only version
//
//   1.7.1
//	 Added GTU Select Non-unique Objects
//
//   1.7.2
//   Updated Scripts so they are compatible with Python 3 (Maya 2022+)
//
//----------------------------------------------------------------------------

// Globals 
global string $scriptVersion = "1.7.2";
global string $gMainWindow;
string  $installedVersion =  `optionVar -q "gt_tools_version"`;

// Recreate icons if the version is different
if (`optionVar -exists "gt_tools_version"` && $scriptVersion != $installedVersion)
    {
    catchQuiet(python("import gt_generate_icons"));
    catchQuiet(python("gt_generate_icons.gt_generate_icons()"));
    }
    
// Set optionVar to the current version
optionVar -sv "gt_tools_version" $scriptVersion;

// Check if auto update is active and silently check it
int  $silentlyAutoCheckUpdate =  `optionVar -q "gt_check_for_updates_auto_active"`;
if (`optionVar -exists "gt_check_for_updates_auto_active"` && $silentlyAutoCheckUpdate != 0)
    {
    catchQuiet(python("import gt_check_for_updates"));
    catchQuiet(python("gt_check_for_updates.silent_update_check()"));
    }
    
if (`optionVar -exists "gt_check_for_updates_auto_active"` == 0)
    {
    optionVar -sv "gt_check_for_updates_auto_active" 1; // First time running
    }
    
    
// Removes existing menu in case it exists
if (`menu -q -exists gtToolsMenu`)
    {
    menu -e -dai gtToolsMenu;
    }
else
    {
    setParent $gMainWindow ;
    menu -l "GT Tools" -p MayaWindow -to true gtToolsMenu ;
    }

setParent -menu gtToolsMenu ;

// -----------------------------------------TOOLS------------------------------------
menuItem -l "Tools" -sm true -to true -image "toolSettings.png";
    menuItem 
    -l ("Renamer") 
    -c ("python(\"import gt_renamer\\nreload(gt_renamer)\\ngt_renamer.build_gui_renamer()\");") 
    -ann ("Script for renaming multiple objects.") 
    -image "renamePreset.png" ;
    
    menuItem 
    -l ("Selection Manager") 
    -c ("python(\"import gt_selection_manager\\nreload(gt_selection_manager)\\ngt_selection_manager.build_gui_selection_manager()\");") 
    -ann ("Manages or creates custom selections.") 
    -image "selectByHierarchy.png" ;
    
    menuItem 
    -l ("Path Manager") 
    -c ("python(\"import gt_path_manager\\nreload(gt_path_manager)\\ntry:\\n\\tgt_path_manager_dialog.close()\\n\\tgt_path_manager_dialog.deleteLater()\\nexcept:\\n\\tpass\\ngt_path_manager.try_to_close_gt_path_manager()\\ngt_path_manager_dialog = gt_path_manager.GTPathManagerDialog()\\ngt_path_manager_dialog.show()\");") 
    -ann ("A script for managing and repairing the path of many nodes.") 
    -image "annotation.png" ;
    
    menuItem 
    -l ("Color Manager") 
    -c ("python(\"import gt_color_manager\\nreload(gt_color_manager)\\ngt_color_manager.build_gui_color_manager()\");") 
    -ann ("A way to quickly change colors of objects and objects names (outliner).") 
    -image "render_swColorPerVertex.png" ;
    
    menuItem 
    -l ("Transfer Transforms") 
    -c ("python(\"import gt_transfer_transforms\\nreload(gt_transfer_transforms)\\ngt_transfer_transforms.build_gui_transfer_transforms()\");") 
    -ann ("Script for quickly transfering Translate, Rotate, and Scale between objects.") 
    -image "transform.svg" ;
    
    menuItem 
    -l ("Render Checklist") 
    -c ("python(\"import gt_render_checklist\\nreload(gt_render_checklist)\\ngt_render_checklist.build_gui_gt_render_checklist()\");") 
    -ann ("Performs a series of checks to detect common issues that are often accidently ignored/unnoticed.") 
    -image "checkboxOn.png" ;
    
    
    setParent -menu ".." ;
    
    
// -----------------------------------------CURVES------------------------------------
menuItem -l "Curves" -sm true -to true -image "out_stroke.png"; //out_stroke.png

    menuItem 
    -l ("Generate Python Curve") 
    -c ("python(\"import gt_generate_python_curve\\nreload(gt_generate_python_curve)\\ngt_generate_python_curve.build_gui_py_curve()\");") 
    -ann ("Generates the python code necessary to create a selected curve.") 
    -image "pythonFamily.png" ;
    
    menuItem 
    -l ("Generate Text Curve") 
    -c ("python(\"import gt_generate_text_curve\\nreload(gt_generate_text_curve)\\ngt_generate_text_curve.build_gui_generate_text_curve()\");") 
    -ann ("Generates a single curve containing all shapes necessary to produce a word/text.") 
    -image "text.png" ;


    // Utility Section
    menuItem -divider true ;
    
    menuItem 
    -l ("Combine Curves")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_combine_curves()\");") 
    -ann ("Combine curves by moving all the shape objects inside one single transform.") 
    -image "nurbsCurve.svg";
    
    menuItem 
    -l ("Separate Curves")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_separate_curves()\");") 
    -ann ("Separate curves by moving every shape object to their own separated transform.") 
    -image "curveEditor.png";



    setParent -menu ".." ;
    
// -----------------------------------------MODELING------------------------------------
menuItem -l "Modeling" -sm true -to true -image "mesh.svg"; //out_stroke.png
    menuItem 
    -l ("Sphere Types") 
    -c ("python(\"import gt_create_sphere_types\\nreload(gt_create_sphere_types)\\ngt_create_sphere_types.build_gui_sphere_type()\");") 
    -ann ("A reminder.") 
    -image "blinn.svg" ;
    
        menuItem 
    -l ("Convert Bif to Mesh")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_convert_bif_to_mesh()\");") 
    -ann ("Converts Bifrost Geometry into Maya Geometry (Mesh). If used with volume or particles the output will be empty.")
    -image "nurbsToPolygons.png";

    
    // Material
    menuItem -divider true ;
    
    menuItem 
    -l ("Copy Material")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_copy_material()\");") 
    -ann ("Copies material to clipboard.") 
    -image "polyBakeSetAssign.png";
    
    menuItem 
    -l ("Paste Material")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_paste_material()\");") 
    -ann ("Pastes material from clipboard.") 
    -image "polyBakeSetEdit.png";



    setParent -menu ".." ;

// -----------------------------------------RIGGING------------------------------------
menuItem -l "Rigging" -sm true -to true -image "kinReroot.png";

    menuItem 
    -l ("Auto Biped Rigger") 
    -c ("python(\"import gt_auto_biped_rigger\\nreload(gt_auto_biped_rigger)\\ngt_auto_biped_rigger.build_gui_auto_biped_rig()\");") 
    -ann ("Automated solution for creating a biped rig.") 
    -image "kinReroot.png" ;
    
    menuItem 
    -l ("Connect Attributes") 
    -c ("python(\"import gt_connect_attributes\\nreload(gt_connect_attributes)\\ngt_connect_attributes.build_gui_connect_attributes()\");") 
    -ann ("Automated solution for connecting multiple attributes.") 
    -image "hsRearrange.png";
    
    menuItem 
    -l ("Mirror Cluster Tool") 
    -c ("python(\"import gt_mirror_cluster_tool\\nreload(gt_mirror_cluster_tool)\\ngt_mirror_cluster_tool.build_gui_mirror_cluster_tool()\");") 
    -ann ("Automated solution for mirroring clusters.") 
    -image "cluster.png";
    
    menuItem 
    -l ("Generate In-Between") 
    -c ("python(\"import gt_generate_inbetween\\nreload(gt_generate_inbetween)\\ngt_generate_inbetween.build_gui_generate_inbetween()\");") 
    -ann ("Generates inbetween transforms that can be used as layers for rigging/animation.") 
    -image "hsGraphMaterial.png" ;
    
    menuItem 
    -l ("Create Auto FK") 
    -c ("python(\"import gt_create_auto_fk\\nreload(gt_create_auto_fk)\\ngt_create_auto_fk.build_gui_auto_fk()\");") 
    -ann ("Automated solution for created an FK control curve.") 
    -image "kinInsert.png" ;

    menuItem 
    -l ("Create Testing Keys") 
    -c ("python(\"import gt_create_testing_keys\\nreload(gt_create_testing_keys)\\ngt_create_testing_keys.build_gui_create_testing_keys()\");") 
    -ann ("Automated solution for making an IK system stretchy.") 
    -image "setMaxInfluence.png" ;

    menuItem 
    -l ("Make IK Stretchy") 
    -c ("python(\"import gt_make_ik_stretchy\\nreload(gt_make_ik_stretchy)\\ngt_make_ik_stretchy.build_gui_make_ik_stretchy()\");") 
    -ann ("Automated solution for making an IK system stretchy.") 
    -image "ikSCsolver.svg" ;
    
    menuItem 
    -l ("Add Sine Attributes") 
    -c ("python(\"import gt_add_sine_attributes\\nreload(gt_add_sine_attributes)\\ngt_add_sine_attributes.build_gui_add_sine_attr()\");") 
    -ann ("Create Sine function without using third-party plugins or expressions.") 
    -image "sineCurveProfile.png" ;
    
    setParent -menu ".." ;


    
// -----------------------------------------UTILITIES------------------------------------

menuItem -l "Utilities" -sm true -to true -image "bsd-head.png";
    
    menuItem 
    -l ("Reload File")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_reload_file()\");") 
    -ann ("Reopens the opened file (to revert back any changes done to the file since it was first opened)") 
    -image "openLoadGeneric.png";
    
    menuItem 
    -l ("Resource Browser")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_open_resource_browser()\");") 
    -ann ("Opens Maya's Resource Browser. A good way to find icons or elements you may want to use.") 
    -image "bsd-head.png";
    
    menuItem 
    -l ("Unlock Default Channels")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_unlock_default_channels()\");") 
    -ann ("Unlocks the default channels of the selected objects. (Default channels : Translate, Rotate, Scale and Visibility)") 
    -image "Lock_OFF_grey.png";
    
    menuItem 
    -l ("Unhide Default Channels")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_unhide_default_channels()\");") 
    -ann ("Unhides the default channels of the selected objects. (Default channels : Translate, Rotate, Scale and Visibility)") 
    -image "RS_filter_list.png";
    
    menuItem 
    -l ("Uniform LRA Toggle")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_uniform_lra_toggle()\");") 
    -ann ("Makes the visibility of the Local Rotation Axis uniform among the selected objects according to the current state of the majority of them.") 
    -image "srt.png";
	
	menuItem 
    -l ("Uniform Joint Label Toggle")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_uniform_jnt_label_toggle()\");") 
    -ann ("Makes the visibility of the joint labels uniform according to the current state of the majority of them.") 
    -image "QR_xRay.png";
    
	menuItem 
    -l ("Select Non-Unique Objects")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_select_non_unique_objects()\");") 
    -ann ("Selects all objects with the same short name. (non-unique objects)") 
    -image "gotoLine.png";
    
    // References
    menuItem -divider true ;
    
    menuItem 
    -l ("Import References")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_import_references()\");") 
    -ann ("Imports all references.") 
    -image "reference.svg";
    
    menuItem 
    -l ("Remove References")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_remove_references()\");") 
    -ann ("Removes all references.") 
    -image "referenceProxy.png";
    
    
    // Pivot
    menuItem -divider true ;
    
    menuItem 
    -l ("Move Pivot to Top")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_move_pivot_to_top()\");") 
    -ann ("Moves pivot point to the top of the boundingbox of every selected object.") 
    -image "moveLayerUp.png";
    
    menuItem 
    -l ("Move Pivot to Base")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_move_pivot_to_base()\");") 
    -ann ("Moves pivot point to the base of the boundingbox of every selected object.") 
    -image "moveLayerDown.png";
    
    menuItem 
    -l ("Move Object to Origin")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_move_to_origin()\");") 
    -ann ("Moves selected objects to origin according to their pivot point.") 
    -image "grid.svg";

    // Reset Section
    menuItem -divider true ;

    menuItem 
    -l ("Reset Transforms")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_reset_transforms()\");") 
    -ann ("Reset transforms. It checks for incomming connections, then set the attribute to 0 if there are none. Currently affects Joints, meshes and transforms. (Only Rotation)") 
    -image "CenterPivot.png";
    
    menuItem 
    -l ("Reset Joints Display")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_reset_joint_sizes()\");") 
    -ann ("Resets the radius attribute back to one in all joints, then changes the global multiplier (jointDisplayScale) back to one.") 
    -image "kinJoint.png";
    
    menuItem 
    -l ("Reset \"persp\" Camera")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_reset_persp_shape_attributes()\");") 
    -ann ("If persp camera exists (default camera), reset its attributes.") 
    -image "camera.svg";


    // Delete Section
    menuItem -divider true ;
    
    menuItem 
    -l ("Delete Namespaces")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_delete_namespaces()\");") 
    -ann ("Deletes all namespaces in the scene.") 
    //-image "rename.png";
    -image "renamePreset.png";
    //-image "namespaceEditor.png";
    
    menuItem 
    -l ("Delete Display Layers")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_delete_display_layers()\");") 
    -ann ("Deletes all display layers.") 
    -image "displayLayer.svg";

    menuItem 
    -l ("Delete Nucleus Nodes")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_delete_nucleus_nodes()\");") 
    -ann ("Deletes all nodes related to particles. (Nucleus, nHair, nCloth, nConstraints, Emitter, etc...)") 
    -image "nParticle.svg";

    menuItem 
    -l ("Delete Keyframes")
    -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_delete_keyframes()\");") 
    -ann ("Deletes all nodes of the type \"animCurveTA\" (keyframes).") 
    -image "keyIntoclip.png";

    setParent -menu ".." ;
    

// -----------------------------------------MISCELLANEOUS------------------------------------

menuItem -l "Miscellaneous" -sm true -to true -image "bin.png";
    
    menuItem 
    -l ("Startup Booster") 
    -c ("python(\"import gt_startup_booster\\nreload(gt_startup_booster)\\ngt_startup_booster.build_gui_startup_booster()\");") 
    -ann ("Improve startup times by managing which plugins get loaded when starting Maya.") 
    -image "out_time.png" ;
    
    
    // If MtoD icon exists, use it
    string $mayaToDiscordIcon = `internalVar -userBitmapsDir` + "gt_maya_to_discord_icon.png";
    if (!`filetest -r $mayaToDiscordIcon`) 
    { 
        catchQuiet(python("import gt_generate_icons"));
        catchQuiet(python("gt_generate_icons.gt_generate_icons()"));
    } 
    
    if (!`filetest -r $mayaToDiscordIcon`) 
    { 
        $mayaToDiscordIcon = "camera.open.svg" ;
    } 
    
    // If fSpy icon exists, use it
    string $fSpyImporterIcon = `internalVar -userBitmapsDir` + "gt_fspy_importer.png";
    if (!`filetest -r $fSpyImporterIcon`) 
    { 
        catchQuiet(python("import gt_generate_icons"));
        catchQuiet(python("gt_generate_icons.gt_generate_icons()"));
    } 
    
    if (!`filetest -r $fSpyImporterIcon`) 
    { 
        $fSpyImporterIcon = "camera.open.svg" ;
    } 


    menuItem 
    -l ("fSpy Importer") 
    -c ("python(\"import gt_fspy_importer\\nreload(gt_fspy_importer)\\ngt_fspy_importer.build_gui_fspy_importer()\");") 
    -ann ("Imports the JSON data exported out of fSpy (Camera Matching software).") 
    -image $fSpyImporterIcon ;

    menuItem 
    -l ("Maya to Discord") 
    -c ("python(\"import gt_maya_to_discord\\nreload(gt_maya_to_discord)\\ngt_maya_to_discord.build_gui_maya_to_discord()\");") 
    -ann ("Send images and videos (playblasts) from Maya to Discord using a Discord Webhook to bridge the two programs.") 
    -image $mayaToDiscordIcon ;
    
    
    
    setParent -menu ".." ;
    


// -----------------------------------------ABOUT------------------------------------

    menuItem -divider true ;
    menuItem -l "Help" -sm true -to true -image "defaultOutliner.svg";
    
    menuItem -l "About"  -c ("python(\"import gt_utilities\\nreload(gt_utilities)\\ngt_utilities.gtu_build_gui_about_gt_tools()\");") -ann ("Opens about menu.") -image "help.png" ;
    menuItem -l "Re-Build Menu" -c ("rehash; source \"gt_tools_menu.mel\" ;") -ann ("Re-Creates this menu, and does a rehash to pick up any new scripts.") -image "refresh.png" ;
    menuItem -l "Check for Updates"  -c ("python(\"import gt_check_for_updates\\nreload(gt_check_for_updates)\\ngt_check_for_updates.build_gui_gt_check_for_updates()\");") -ann ("Check for updates by comparing current version with latest release.") -image "RS_import_layer.png" ;
    menuItem -l ("Installed Version: "   +  $scriptVersion) -en false -itl true -image "SP_FileDialogToParent_Disabled.png";