global proc shelf_VFS_Render_Checklist () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Performs a series of checks to detect common issues that are often accidently ignored/unnoticed." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Duplicate as Mesh Reference" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Check" 
        -overlayLabelColor 1 1 1 
        -overlayLabelBackColor 1 0 0 1 
        -image "checkboxOn.png" 
        -image1 "checkboxOn.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "\"\"\"\n\n GT Render Checklist\n @Guilherme Trevisan - TrevisanGMW@gmail.com - 2020-06-11\n \n When creating a new checklist, change these items:\n    script_name - variable content\n    build_gui_gt_render_checklist() - name of the function\n    build_gui_help_gt_render_checklist() - name of the function\n\n To Do:\n    Add checks for simulation cache paths. Maya Fluids, nucleus, bifrost, bullet, MASH\n    Add checks for Arnold and Redshift Volume Containers\n    Add checks for Standins and Proxies\n    \n\"\"\"\nimport maya.cmds as cmds\nimport maya.mel as mel\nimport copy\nfrom maya import OpenMayaUI as omui\n\ntry:\n    from shiboken2 import wrapInstance\nexcept ImportError:\n    from shiboken import wrapInstance\n\ntry:\n    from PySide2.QtGui import QIcon\n    from PySide2.QtWidgets import QWidget\nexcept ImportError:\n    from PySide.QtGui import QIcon, QWidget\n\n\n# Checklist Name\nscript_name = \"GT Render Checklist\" \n\n# Version\nscript_version = \"1.0\";\n\n# Status Colors\ndef_color = 0.3, 0.3, 0.3\npass_color = (0.17, 1.0, 0.17)\nwarning_color = (1.0, 1.0, 0.17)\nerror_color = (1.0, 0.17, 0.17)\nexception_color = 0.2, 0.2, 0.2\n\n# Checklist Items - Item Number [Name, Expected Value]\nchecklist_items = { 0 : [\"Frame Rate\", \"film\"],\n                    1 : [\"Scene Units\", \"cm\"],\n                    2 : [\"Output Resolution\", [\"1920\",\"1080\"] ],\n                    3 : [\"Total Texture Count\", [40, 50] ],\n                    4 : [\"Network File Paths\", [\"vfsstorage10\"] ], # Uses startswith and ignores slashes\n                    5 : [\"Network Reference Paths\", [\"vfsstorage10\"] ], # Uses startswith and ignores slashes\n                    6 : [\"Unparented Objects\", 0],\n                    7 : [\"Total Triangle Count\", [1800000, 2000000] ],\n                    8 : [\"Total Poly Object Count\", [90, 100] ],\n                    9 : [\"Shadow Casting Lights\", [2, 3] ],\n                   10 : [\"RS Shadow Casting Lights\", [3, 4]],\n                   11 : [\"Ai Shadow Casting Lights\", [3, 4]],\n                   12 : [\"Default Object Names\", 0],\n                   13 : [\"Objects Assigned to lambert1\", 0],\n                   14 : [\"Ngons\", 0],\n                   15 : [\"Non-manifold Geometry\", 0],\n                   16 : [\"Empty UV Sets\", 0],\n                   17 : [\"Frozen Transforms\", 0],\n                   18 : [\"Animated Visibility\", 0],\n                   19 : [\"Non Deformer History\", 0 ],\n                   20 : [\"Textures Color Space\", 0 ]\n                  }\n\n# Store Default Values for Reseting\nsettings_default_checklist_values = copy.deepcopy(checklist_items)\n\n# Checklist Settings\nchecklist_settings = { \"is_settings_visible\" : False,\n                       \"checklist_column_height\" : 0,\n                       \"checklist_buttons_height\" : 0,\n                       \"settings_text_fields\" : []\n                     }\n\n# Build GUI - Main Function ==================================================================================\ndef build_gui_gt_render_checklist():\n    window_name = \"build_gui_gt_render_checklist\"\n    if cmds.window(window_name, exists=True):\n        cmds.deleteUI(window_name, window=True)\n\n    cmds.window(window_name, title=script_name + \"  v\" + script_version, mnb=False, mxb=False, s=True)\n\n    main_column = cmds.columnLayout()\n\n    cmds.showWindow(window_name)\n    cmds.window(window_name, e=True, h=1, w=1)\n    \n    # Title Text\n    cmds.rowColumnLayout(nc=1, cw=[(1, 310)], cs=[(1, 10)], p=main_column) # Window Size Adjustment\n    cmds.separator(h=14, style='none') # Empty Space\n    cmds.rowColumnLayout(nc=4, cw=[(1, 10), (2, 190), (3, 60), (4, 40)], cs=[(1, 10), (2, 0), (3, 0)], p=main_column)\n\n    cmds.text(\" \", bgc=[0,.5,0])\n    cmds.text(script_name, bgc=[0,.5,0],  fn=\"boldLabelFont\", align=\"left\")\n    settings_btn = cmds.button( l =\"Settings\", bgc=(0, .5, 0), c=lambda x:update_gui_settings())\n    cmds.button( l =\"Help\", bgc=(0, .5, 0), c=lambda x:build_gui_help_gt_render_checklist())\n    cmds.separator(h=10, style='none', p=main_column) # Empty Space\n    cmds.rowColumnLayout(nc=1, cw=[(1, 300)], cs=[(1,10)], p=main_column) # For the separator\n    cmds.separator(h=8)\n    cmds.separator(h=5, style='none') # Empty Space\n    \n    # Settings Column  ==========================================================\n    settings_column = cmds.rowColumnLayout(nc=1, cw=[(1, 310)], cs=[(1, 0)], h=1, p=main_column) \n    \n    cmds.rowColumnLayout(nc=3, cw=[(1, 150), (2, 65), (3, 63)], cs=[(1, 19), (2, 6), (3, 6)])\n    \n    # Header\n    cmds.text(l=\"Operation\", align=\"left\")\n    cmds.text(l='Warning', align=\"center\")\n    cmds.text(l='Expected', align=\"center\")\n    cmds.separator(h=5, style='none')\n    cmds.separator(h=5, style='none')\n    cmds.separator(h=5, style='none')\n\n    # Settings : \n    font_size ='smallPlainLabelFont'\n    items_for_settings = [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11] # Allow user to update expected values\n    items_with_warnings = [3, 7, 8, 9, 10, 11] # Allow users to update warning values too\n    def create_settings_items(items, items_for_settings, items_with_warnings):\n        for item in items:\n            item_id = checklist_items.get(item)[0].lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n            cmds.text(l=checklist_items.get(item)[0] + ': ', align=\"left\")\n            \n            # Items with warnings\n            if item in items_with_warnings:\n                cmds.textField('settings_warning_' + str(item), tx=checklist_items.get(item)[1][0], h=14, font=font_size)\n                checklist_settings.get('settings_text_fields').append('settings_warning_' + str(item))\n            else:\n                cmds.textField(en=False, h=14)\n            \n            # Items for settings only\n            if item in items_for_settings:\n                if item not in items_with_warnings:\n                    if isinstance(checklist_items.get(item)[1],list):\n                        combined_values = ''\n                        for array_item in checklist_items.get(item)[1]:\n                            combined_values = str(combined_values) + str(array_item) + ', ' \n                        if len(checklist_items.get(item)[1]) > 0:\n                            combined_values = combined_values[:-2]\n                        cmds.textField('settings_list_error_' + str(item), tx=combined_values , h=14, font=font_size)\n                        checklist_settings.get('settings_text_fields').append('settings_list_error_' + str(item))\n                    else:\n                        cmds.textField('settings_1d_error_' + str(item), tx=checklist_items.get(item)[1] , h=14, font=font_size)\n                        checklist_settings.get('settings_text_fields').append('settings_1d_error_' + str(item))\n                else:\n                    cmds.textField('settings_2d_error_' + str(item), tx=checklist_items.get(item)[1][1] , h=14, font=font_size)\n                    checklist_settings.get('settings_text_fields').append('settings_2d_error_' + str(item))\n            else:\n                cmds.textField(en=False,h=14, font=font_size)\n\n\n    create_settings_items(checklist_items, items_for_settings, items_with_warnings)\n\n\n    # Checklist Column  ==========================================================\n    checklist_column = cmds.rowColumnLayout(nc=3, cw=[(1, 165), (2, 35), (3, 90)], cs=[(1, 20), (2, 6), (3, 6)], p=main_column) \n    \n    # Header\n    cmds.text(l=\"Operation\", align=\"left\")\n    cmds.text(l='Status', align=\"left\")\n    cmds.text(l='Info', align=\"center\")\n    cmds.separator(h=5, style='none')\n    cmds.separator(h=5, style='none')\n    cmds.separator(h=5, style='none')\n\n    # Build Checklist \n    def create_checklist_items(items):\n        for item in items:\n            item_id = checklist_items.get(item)[0].lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n            cmds.text(l=checklist_items.get(item)[0] + ': ', align=\"left\")\n            cmds.button(\"status_\" + item_id , l='', h=14, bgc=def_color)\n            cmds.text(\"output_\" + item_id, l='...', align=\"center\")\n\n    create_checklist_items(checklist_items)\n\n    cmds.rowColumnLayout(nc=1, cw=[(1, 300)], cs=[(1,10)], p=main_column) # For the separator\n    cmds.separator(h=8, style='none') # Empty Space\n    cmds.separator(h=8)\n    \n\n    # Checklist Buttons ==========================================================\n    checklist_buttons = cmds.rowColumnLayout(nc=1, cw=[(1, 300)], cs=[(1,10)], p=main_column)\n    cmds.separator(h=10, style='none')\n    cmds.button(l='Generate Report', h=30, c=lambda args: checklist_generate_report())\n    cmds.separator(h=10, style='none')\n    cmds.button(l='Refresh', h=30, c=lambda args: checklist_refresh())\n    cmds.separator(h=8, style='none')\n    \n    settings_buttons = cmds.rowColumnLayout(nc=1, cw=[(1, 300)], cs=[(1,10)], p=main_column, h=1)\n    cmds.separator(h=9, style='none')\n    save_load_row = cmds.rowColumnLayout( nc=2, cw=[(1, 145),(2, 145), ], cs=[(1,0), (2,10)], p=settings_buttons, h=30)\n    cmds.button(l='Import Settings', h=30, c=lambda args: settings_import_state(),p= save_load_row)\n    cmds.button(l='Export Settings', h=30, c=lambda args: settings_export_state(),p= save_load_row)\n    cmds.separator(h=10, style='none', p=settings_buttons)\n    cmds.button(l='Reset to Default Values', h=30, c=lambda args: settings_apply_changes(reset_default=True), p=settings_buttons)\n    cmds.separator(h=8, style='none', p=settings_buttons)\n    \n    \n    def update_gui_settings():\n        if checklist_settings.get('is_settings_visible') != True:\n            checklist_settings[\"is_settings_visible\"] = True\n\n            cmds.button(settings_btn, e=True, l='Apply', bgc=(0, .3, 0)) \n\n            # Hide Checklist Items\n            checklist_settings[\"checklist_column_height\"] = cmds.rowColumnLayout(checklist_column, q=True, h=True)\n            cmds.rowColumnLayout(checklist_column, e=True, h=1)\n            \n            # Show Settings Items\n            cmds.rowColumnLayout(settings_column, e=True, h=(checklist_settings.get('checklist_column_height')))\n            \n            # Hide Checklist Buttons\n            checklist_settings[\"checklist_buttons_height\"] = cmds.rowColumnLayout(checklist_buttons, q=True, h=True)\n            cmds.rowColumnLayout(checklist_buttons, e=True, h=1)\n            \n            # Show Settings Buttons\n            cmds.rowColumnLayout(settings_buttons, e=True, h=checklist_settings.get('checklist_buttons_height'))\n            \n    \n        else:\n            checklist_settings[\"is_settings_visible\"] = False\n            cmds.rowColumnLayout(checklist_column, e=True, h=checklist_settings.get('checklist_column_height'))\n            cmds.rowColumnLayout(checklist_buttons, e=True, h=checklist_settings.get('checklist_buttons_height'))\n            cmds.rowColumnLayout(settings_column, e=True, h=1)\n            cmds.rowColumnLayout(settings_buttons, e=True, h=1)\n            cmds.button(settings_btn, e=True, l='Settings', bgc=(0, .5, 0))\n            settings_apply_changes()\n            \n\n\n    # Lock Window\n    cmds.showWindow(window_name)\n    cmds.window(window_name, e=True, s=False)\n    \n    # Set Window Icon\n    qw = omui.MQtUtil.findWindow(window_name)\n    widget = wrapInstance(long(qw), QWidget)\n    icon = QIcon(':/checkboxOn.png')\n    widget.setWindowIcon(icon)\n\n    # Main GUI Ends ==========================================================\n\n    \n\n\ndef checklist_refresh():\n    # Save Current Selection For Later\n    current_selection = cmds.ls(selection=True)\n    \n    check_frame_rate()\n    check_scene_units()\n    check_output_resolution()\n    check_total_texture_count()\n    check_network_file_paths()\n    check_network_reference_paths()\n    check_unparented_objects()  \n    check_total_triangle_count()\n    check_total_poly_object_count()\n    check_shadow_casting_light_count()\n    check_rs_shadow_casting_light_count()\n    check_ai_shadow_casting_light_count()\n    check_default_object_names()\n    check_objects_assigned_to_lambert1()\n    check_ngons()\n    check_non_manifold_geometry()\n    check_empty_uv_sets()\n    check_frozen_transforms()\n    check_animated_visibility()\n    check_non_deformer_history()\n    check_textures_color_space()\n    \n    # Clear Selection\n    cmds.selectMode( object=True )\n    cmds.select(clear=True)\n    \n    # Reselect Previous Selection\n    cmds.select(current_selection)\n    \n\ndef checklist_generate_report():\n    # Save Current Selection For Later\n    current_selection = cmds.ls(selection=True)\n    \n    report_strings = []\n    report_strings.append(check_frame_rate())\n    report_strings.append(check_scene_units())\n    report_strings.append(check_output_resolution())\n    report_strings.append(check_total_texture_count())\n    report_strings.append(check_network_file_paths())\n    report_strings.append(check_network_reference_paths())\n    report_strings.append(check_unparented_objects())\n    report_strings.append(check_total_triangle_count())\n    report_strings.append(check_total_poly_object_count())\n    report_strings.append(check_shadow_casting_light_count())\n    report_strings.append(check_rs_shadow_casting_light_count())\n    report_strings.append(check_ai_shadow_casting_light_count())\n    report_strings.append(check_default_object_names())\n    report_strings.append(check_objects_assigned_to_lambert1())\n    report_strings.append(check_ngons())\n    report_strings.append(check_non_manifold_geometry())\n    report_strings.append(check_empty_uv_sets())\n    report_strings.append(check_frozen_transforms())\n    report_strings.append(check_animated_visibility())\n    report_strings.append(check_non_deformer_history())\n    report_strings.append(check_textures_color_space())\n    \n    # Clear Selection\n    cmds.selectMode( object=True )\n    cmds.select(clear=True)\n    \n    # Show Report\n    export_report_to_txt(report_strings)\n    \n    # Reselect Previous Selection\n    cmds.select(current_selection)\n    \n\n    \n# Creates Help GUI\ndef build_gui_help_gt_render_checklist():\n    window_name = \"build_gui_help_gt_render_checklist\"\n    if cmds.window(window_name, exists=True):\n        cmds.deleteUI(window_name, window=True)\n\n    cmds.window(window_name, title= script_name + \" Help\", mnb=False, mxb=False, s=True)\n    cmds.window(window_name, e=True, s=True, wh=[1,1])\n\n    cmds.columnLayout(\"main_column\", p= window_name)\n   \n    # Title Text\n    cmds.separator(h=12, style='none') # Empty Space\n    cmds.rowColumnLayout(nc=1, cw=[(1, 310)], cs=[(1, 10)], p=\"main_column\") # Window Size Adjustment\n    cmds.rowColumnLayout(nc=1, cw=[(1, 300)], cs=[(1, 10)], p=\"main_column\") # Title Column\n    cmds.text(script_name + \" Help\", bgc=[0,.5,0],  fn=\"boldLabelFont\", align=\"center\")\n    cmds.separator(h=10, style='none', p=\"main_column\") # Empty Space\n\n    # Body ====================\n    checklist_spacing = 4\n    cmds.rowColumnLayout(nc=1, cw=[(1, 300)], cs=[(1,10)], p=\"main_column\")\n    cmds.text(l='This script performs a series of checks to detect common', align=\"left\")\n    cmds.text(l='issues that are often accidently ignored/unnoticed.', align=\"left\")\n    \n    # Checklist Status =============\n    cmds.separator(h=15, style='none') # Empty Space\n    cmds.text(l='Checklist Status:', align=\"left\", fn=\"boldLabelFont\") \n    cmds.text(l='These are also buttons, you can click on them for extra functions:', align=\"left\", fn=\"smallPlainLabelFont\") \n    cmds.separator(h=5, style='none') # Empty Space\n    \n    cmds.rowColumnLayout(nc=2, cw=[(1, 35),(2, 265)], cs=[(1, 10),(2, 10)], p=\"main_column\")\n    cmds.button(l='', h=14, bgc=def_color, c=lambda args: print_message('Default color, means that it was not yet tested.', as_heads_up_message=True))\n    cmds.text(l='- Default color, not yet tested.', align=\"left\", fn=\"smallPlainLabelFont\") \n    \n    cmds.button(l='', h=14, bgc=pass_color, c=lambda args: print_message('Pass color, means that no issues were found.', as_heads_up_message=True))\n    cmds.text(l='- Pass color, no issues were found.', align=\"left\", fn=\"smallPlainLabelFont\") \n    \n    cmds.button(l='', h=14, bgc=warning_color, c=lambda args: print_message('Warning color, some possible issues were found', as_heads_up_message=True))\n    cmds.text(l='- Warning color, some possible issues were found', align=\"left\", fn=\"smallPlainLabelFont\") \n    \n    cmds.button(l='', h=14, bgc=error_color, c=lambda args: print_message('Error color, means that some possible issues were found', as_heads_up_message=True))\n    cmds.text(l='- Error color, issues were found.', align=\"left\", fn=\"smallPlainLabelFont\") \n    \n    cmds.button(l='', h=14, bgc=exception_color, c=lambda args: print_message('Exception color, an issue caused the check to fail. Likely because of a missing plug-in or unexpected value', as_heads_up_message=True))\n    cmds.text(l='- Exception color, an issue caused the check to fail.', align=\"left\", fn=\"smallPlainLabelFont\") \n    \n    cmds.button(l='?', h=14, bgc=def_color, c=lambda args: print_message('Question mask, click on button for more help. It often gives you extra options regarding the found issues.', as_heads_up_message=True))\n    cmds.text(l='- Question mask, click on button for more help.', align=\"left\", fn=\"smallPlainLabelFont\") \n    \n    cmds.separator(h=15, style='none') # Empty Space\n\n    # Checklist Items =============\n    cmds.rowColumnLayout(nc=1, cw=[(1, 300)], cs=[(1, 10)], p=\"main_column\")\n    cmds.text(l='Checklist Items:', align=\"left\", fn=\"boldLabelFont\") \n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n   \n    # Create Help List: \n    font_size ='smallPlainLabelFont'\n    items_for_settings = [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11] # Allow user to update expected values\n    items_with_warnings = [3, 7, 8, 9, 10, 11] # Allow users to update warning values too\n    \n      \n    cmds.text(l='- ' + checklist_items.get(0)[0] +': error if not: ' + str(checklist_items.get(0)[1]), align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(1)[0] +': error if not: ' + str(checklist_items.get(1)[1]), align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(2)[0] +': error if not: ' + str(checklist_items.get(2)[1]), align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(3)[0] +': error if more than ' + str(checklist_items.get(3)[1][1]) +  ' warning if more than ' + str(checklist_items.get(3)[1][0]), align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(4)[0] +': must start with ' + str(checklist_items.get(4)[1]), align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.text(l='  (This function ignore slashes. You may use lists as custom value)', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(5)[0] +': must start with ' + str(checklist_items.get(5)[1]) + '', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.text(l='  (This function ignore slashes. You may use lists as custom value)', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(6)[0] +': No common objects outside hierarchies', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(7)[0] +': : error if more than ' + str(checklist_items.get(7)[1][1]), align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.text(l='  warning if more than: ' + str(checklist_items.get(7)[1][0]) + '.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(8)[0] +': error if more than ' + str(checklist_items.get(8)[1][1]), align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.text(l='  warning if more than ' + str(checklist_items.get(8)[1][0]) + '.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(9)[0] +': error if more than ' + str(checklist_items.get(9)[1][1]), align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.text(l='  warning if more than ' + str(checklist_items.get(9)[1][0]) + '.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(10)[0] +': error if more than ' + str(checklist_items.get(10)[1][1]), align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.text(l='  warning if more than ' + str(checklist_items.get(10)[1][0]) + '.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(11)[0] +': error if more than ' + str(checklist_items.get(11)[1][1]), align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.text(l='  warning if more than ' + str(checklist_items.get(11)[1][0]) + '.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(12)[0] +': error if using default names.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.text(l='  warning if containing default names. (e.g. \"my_pCube\")', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(13)[0] +': error if anything is assigned.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(14)[0] +': error if any ngons found.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(15)[0] +': error if any non-manifold issue found.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(16)[0] +': error if multiples UV Sets and Empty UV Sets.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(17)[0] +': error if rotation(XYZ) not frozen.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.text(l='  (doesn\\'t check objects with incoming connections, animations)', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(18)[0] +': error if animated visibility is found', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.text(l='  warning if hidden object is found.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(19)[0] +': error if any non-deformer history found.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n    \n    cmds.text(l='- ' + checklist_items.get(20)[0] +': error if incorrect color space found.', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.text(l='  (It only checks commonly used nodes for Redshift and Arnold)', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.text(l='  generally \"sRGB\" -> float3(color), and \"Raw\" -> float(value)', align=\"left\", fn=\"smallPlainLabelFont\")\n    cmds.separator(h=checklist_spacing, style='none') # Empty Space\n   \n    cmds.separator(h=7, style='none') # Empty Space\n    cmds.text(l='  Issues when using the script?  Please contact me :', align=\"left\")\n    \n\n    # Footer =============\n    cmds.separator(h=15, style='none') # Empty Space\n    cmds.rowColumnLayout(nc=2, cw=[(1, 140),(2, 140)], cs=[(1,10),(2, 0)], p=\"main_column\")\n    cmds.text('Guilherme Trevisan  ')\n    cmds.text(l='<a href=\"mailto:trevisangmw@gmail.com\">TrevisanGMW@gmail.com</a>', hl=True, highlightColor=[1,1,1])\n    cmds.rowColumnLayout(nc=2, cw=[(1, 140),(2, 140)], cs=[(1,10),(2, 0)], p=\"main_column\")\n    cmds.separator(h=15, style='none') # Empty Space\n    cmds.text(l='<a href=\"https://github.com/TrevisanGMW\">Github</a>', hl=True, highlightColor=[1,1,1])\n    cmds.separator(h=7, style='none') # Empty Space\n    \n    \n    # Close Button \n    cmds.rowColumnLayout(nc=1, cw=[(1, 300)], cs=[(1,10)], p=\"main_column\")\n    cmds.separator(h=10, style='none')\n    cmds.button(l='OK', h=30, c=lambda args: close_help_gui())\n    cmds.separator(h=8, style='none')\n    \n    # Show and Lock Window\n    cmds.showWindow(window_name)\n    cmds.window(window_name, e=True, s=False)\n    \n    # Set Window Icon\n    qw = omui.MQtUtil.findWindow(window_name)\n    widget = wrapInstance(long(qw), QWidget)\n    icon = QIcon(':/question.png')\n    widget.setWindowIcon(icon)\n    \n    def close_help_gui():\n        if cmds.window(window_name, exists=True):\n            cmds.deleteUI(window_name, window=True)\n    \n\n# Checklist Functions Start Here ================================================================\n\n# Item 0 - Frame Rate\ndef check_frame_rate():\n    item_name = checklist_items.get(0)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(0)[1]\n    received_value = cmds.currentUnit( query=True, time=True ) # Frame Rate\n    issues_found = 0\n\n    if received_value == expected_value:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message(item_name + ': '  + str(received_value).capitalize())) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: patch_frame_rate())\n        issues_found = 1\n        \n    cmds.text(\"output_\" + item_id, e=True, l=str(received_value).capitalize() )\n    \n    # Patch Function ----------------------\n    def patch_frame_rate():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message='Do you want to change your ' + item_name.lower() + ' from \"' + str(received_value) + '\" to \"' + str(expected_value).capitalize() + '\"?',\n                    button=['Yes, change it for me', 'Ignore Issue'],\n                    defaultButton='Yes, change it for me',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"question\")\n\n        if user_input == 'Yes, change it for me':\n            try: \n                cmds.currentUnit( time=expected_value )\n                print(\"Your \" + item_name.lower() + \" was changed to \" + expected_value)\n            except:\n                cmds.warning('Failed to use custom setting \"' + str(expected_value) +  '\"  as your new frame rate.')\n            check_frame_rate()\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    if issues_found > 0:\n        string_status = str(issues_found) + \" issue found. The expected \" + item_name.lower() + ' was \"'  + str(expected_value).capitalize() + '\" and yours is \"' + str(received_value).capitalize() + '\"'\n    else: \n        string_status = str(issues_found) + \" issues found. The expected \" + item_name.lower() + ' was \"'  + str(expected_value).capitalize() + '\" and yours is \"' + str(received_value).capitalize() + '\"'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n    \n    \n\n# Item 1 - Scene Units =========================================================================\ndef check_scene_units():\n    item_name = checklist_items.get(1)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(1)[1]\n    received_value = cmds.currentUnit( query=True, linear=True )\n    issues_found = 0\n\n    if received_value.lower() == str(expected_value).lower():\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message(item_name + ': \"'  + str(received_value) + '\".')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: patch_scene_units())\n        issues_found = 1\n        \n    cmds.text(\"output_\" + item_id, e=True, l=str(received_value).capitalize() )\n    \n    # Patch Function ----------------------\n    def patch_scene_units():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message='Do you want to change your ' + item_name.lower() + ' from \"' + str(received_value) + '\" to \"' + str(expected_value).capitalize() + '\"?',\n                    button=['Yes, change it for me', 'Ignore Issue'],\n                    defaultButton='Yes, change it for me',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"question\")\n\n        if user_input == 'Yes, change it for me':\n            try:\n                cmds.currentUnit( linear=str(expected_value ))\n                print(\"Your \" + item_name.lower() + \" was changed to \" + str(expected_value))\n            except:\n                cmds.warning('Failed to use custom setting \"' + str(expected_value) +  '\"  as your new scene unit.')\n            check_scene_units()\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n\n    # Return string for report ------------\n    if issues_found > 0:\n        string_status = str(issues_found) + \" issue found. The expected \" + item_name.lower() + ' was \"'  + str(expected_value).capitalize() + '\" and yours is \"' + str(received_value).capitalize() + '\"'\n    else: \n        string_status = str(issues_found) + \" issues found. The expected \" + item_name.lower() + ' was \"'  + str(expected_value).capitalize() + '\" and yours is \"' + str(received_value).capitalize() + '\"'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n\n# Item 2 - Output Resolution =========================================================================\ndef check_output_resolution():\n    item_name = checklist_items[2][0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items[2][1]\n    \n    # Check Custom Value\n    custom_settings_failed = False\n    if isinstance(expected_value, list):\n        if len(expected_value) < 2:\n            custom_settings_failed = True\n            expected_value = settings_default_checklist_values[2][1]\n            \n    received_value = [cmds.getAttr(\"defaultResolution.width\"), cmds.getAttr(\"defaultResolution.height\")]\n    issues_found = 0\n\n    if str(received_value[0]) == str(expected_value[0]) and str(received_value[1]) == str(expected_value[1]):\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message(item_name + ': \"' + str(received_value[0]) + 'x' + str(received_value[1]) + '\".')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: patch_output_resolution())\n        issues_found = 1\n        \n    cmds.text(\"output_\" + item_id, e=True, l=str(received_value[0]) + 'x' + str(received_value[1]) )\n    \n    # Patch Function ----------------------\n    def patch_output_resolution():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message='Do you want to change your ' + item_name.lower() + ' from : \"' + str(received_value[0]) + 'x' + str(received_value[1]) + '\" to \"' + str(expected_value[0]) + 'x' + str(expected_value[1]) + '\"?',\n                    button=['Yes, change it for me', 'Ignore Issue'],\n                    defaultButton='Yes, change it for me',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"question\")  \n\n        if user_input == 'Yes, change it for me':\n            try:\n                cmds.setAttr( \"defaultResolution.width\", int(expected_value[0]) )\n                cmds.setAttr( \"defaultResolution.height\", int(expected_value[1]) )\n                print('Your ' + item_name.lower() + ' was changed to \"' + str(expected_value[0]) + 'x' + str(expected_value[1]) + '\"')\n            except:\n                cmds.warning('Failed to use custom setting \"' + str(expected_value[0]) + 'x' + str(expected_value[1]) + '\" as your new resolution.')\n            check_output_resolution()\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n            \n    # Return string for report ------------\n    if issues_found > 0:\n        string_status = str(issues_found) + \" issue found. The expected \" + item_name.lower() + ' was \"'  + str(expected_value[0]) + 'x' + str(expected_value[1]) + '\" and yours is \"' + str(received_value[0]) + 'x' + str(received_value[1]) + '\"'\n    else: \n        string_status = str(issues_found) + \" issues found. The expected \" + item_name.lower() + ' was \"'  + str(expected_value[0]) + 'x' + str(expected_value[1]) + '\" and yours is \"' + str(received_value[0]) + 'x' + str(received_value[1]) + '\"'\n    if custom_settings_failed:\n        string_status = '1 issue found. The custom resolution settings provided couldn\\'t be used to check your resolution'\n        cmds.button(\"status_\" + item_id, e=True, bgc=exception_color, l= '', c=lambda args: print_message('The custom value provided couldn\\'t be used to check the resolution.', as_warning=True))\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n\n# Item 3 - Total Texture Count =========================================================================\ndef check_total_texture_count():\n    item_name = checklist_items.get(3)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(3)[1] \n\n    received_value = 0 \n    issues_found = 0\n\n    # Check Custom Value\n    custom_settings_failed = False\n    if isinstance(expected_value[0], int) == False or isinstance(expected_value[1], int) == False:\n        custom_settings_failed = True\n\n\n    # Count Textures\n    all_file_nodes = cmds.ls(type=\"file\")\n    for file in all_file_nodes:\n        uv_tiling_mode = cmds.getAttr(file + '.uvTilingMode')\n        if uv_tiling_mode != 0:\n            use_frame_extension = cmds.getAttr(file + '.useFrameExtension')\n            file_path = cmds.getAttr(file + \".fileTextureName\")\n            udim_file_pattern = maya.app.general.fileTexturePathResolver.getFilePatternString(file_path, use_frame_extension, uv_tiling_mode)\n            udim_textures = maya.app.general.fileTexturePathResolver.findAllFilesForPattern(udim_file_pattern, None)\n            received_value +=len(udim_textures)\n        else:\n            received_value +=1\n        \n    \n    # Manager Message\n    patch_message = 'Your ' + item_name.lower() + ' should be reduced from \"' + str(received_value) + '\" to less than \"' + str(expected_value[1]) + '\".\\n (UDIM tiles are counted as individual textures)'\n    cancel_button = 'Ignore Issue'\n    \n    \n    if received_value <= expected_value[1] and received_value > expected_value[0]:\n        cmds.button(\"status_\" + item_id, e=True, bgc=warning_color, l= '', c=lambda args: warning_total_texture_count()) \n        patch_message = 'Your ' + item_name.lower() + ' is \"' + str(received_value) + '\" which is a high number.\\nConsider optimizing. (UDIM tiles are counted as individual textures)'\n        cancel_button = 'Ignore Warning'\n        issues_found = 0\n    elif received_value <= expected_value[1]:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message(item_name + ': \"'  + str(received_value) + '\". (UDIM tiles are counted as individual textures)')) \n\n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_total_texture_count())\n        issues_found = 1\n        \n    cmds.text(\"output_\" + item_id, e=True, l=received_value )\n    \n\n    # Patch Function ----------------------\n    def warning_total_texture_count():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message=patch_message,\n                    button=['OK', cancel_button],\n                    defaultButton='OK',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"warning\")\n\n        if user_input == 'Ignore Warning':\n            cmds.button(\"status_\" + item_id, e=True, l= '', bgc=pass_color)\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    if issues_found > 0:\n        string_status = str(issues_found) + \" issue found. The expected \" + item_name.lower() + ' was less than \"'  + str(expected_value[1]) + '\" and yours is \"' + str(received_value) + '\"'\n    else: \n        string_status = str(issues_found) + \" issues found. The expected \" + item_name.lower() + ' was less than \"'  + str(expected_value[1]) + '\" and yours is \"' + str(received_value) + '\"'\n    if custom_settings_failed:\n        string_status = '1 issue found. The custom value provided couldn\\'t be used to check your total texture count'\n        cmds.button(\"status_\" + item_id, e=True, bgc=exception_color, l= '', c=lambda args: print_message('The custom value provided couldn\\'t be used to check your total texture count', as_warning=True))\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n    \n# Item 4 - Network File Paths =========================================================================\ndef check_network_file_paths():\n    item_name = checklist_items.get(4)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(4)[1]\n    incorrect_file_nodes = []\n    \n    # Count Incorrect File Nodes\n    all_file_nodes = cmds.ls(type=\"file\")\n    for file in all_file_nodes:\n        file_path = cmds.getAttr(file + \".fileTextureName\")\n        if file_path != '':\n            file_path_no_slashes = file_path.replace('/','').replace('\\\\','')\n            for valid_path in expected_value:\n                if file_path_no_slashes.startswith(valid_path):\n                    pass\n                else:\n                    incorrect_file_nodes.append(file)\n        else:\n            incorrect_file_nodes.append(file)\n\n\n    if len(incorrect_file_nodes) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('All file nodes currently sourced from the network.')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_network_file_paths())\n        issues_found = len(incorrect_file_nodes)\n        \n    cmds.text(\"output_\" + item_id, e=True, l=len(incorrect_file_nodes) )\n    \n    # Patch Function ----------------------\n    def warning_network_file_paths():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message=str(len(incorrect_file_nodes)) + ' of your file node paths aren\\'t pointing to the network drive. \\nPlease change their path to a network location. \\n\\n(Too see a list of nodes, generate a full report)',\n                    button=['OK', 'Ignore Issue'],\n                    defaultButton='OK',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"warning\")\n\n        if user_input == '':\n            pass\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    issue_string = \"issues\"\n    if issues_found == 1:\n        issue_string = \"issue\"\n    if issues_found > 0:\n        string_status = str(issues_found) + ' ' + issue_string + ' found.\\n'\n        for file_node in incorrect_file_nodes: \n            string_status = string_status + '\"' + file_node +  '\" isn\\'t pointing to the the network drive. Your texture files should be sourced from the network.\\n'\n    else: \n        string_status = str(issues_found) + ' issues found. All textures were sourced from the network'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n\n# Item 5 - Network Reference Paths =========================================================================\ndef check_network_reference_paths():\n    item_name = checklist_items.get(5)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(5)[1]\n    incorrect_reference_nodes = []\n    \n    # Count Incorrect Reference Nodes\n    reference_list = cmds.ls(rf = True)\n    for ref in reference_list:\n        ref_path = cmds.referenceQuery(ref, filename = True)\n        if ref_path != '':\n            ref_path_no_slashes = ref_path.replace('/','').replace('\\\\','')\n            for valid_path in expected_value:\n                if ref_path_no_slashes.startswith(valid_path):\n                    pass\n                else:\n                    incorrect_reference_nodes.append(ref)\n        else:\n            incorrect_reference_nodes.append(ref)\n\n    \n    if len(incorrect_reference_nodes) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('All file nodes currently sourced from the network.')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_network_reference_paths())\n        issues_found = len(incorrect_reference_nodes)\n        \n    cmds.text(\"output_\" + item_id, e=True, l=len(incorrect_reference_nodes) )\n    \n    # Patch Function ----------------------\n    def warning_network_reference_paths():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message=str(len(incorrect_reference_nodes)) + ' of your reference paths aren\\'t pointing to the network drive. \\nPlease change their path to a network location. \\n\\n(Too see a list of nodes, generate a full report)',\n                    button=['OK', 'Ignore Issue'],\n                    defaultButton='OK',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"warning\")\n\n        if user_input == '':\n            pass\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    issue_string = \"issues\"\n    if issues_found == 1:\n        issue_string = \"issue\"\n    if issues_found > 0:\n        string_status = str(issues_found) + ' ' + issue_string + ' found.\\n'\n        for file_node in incorrect_reference_nodes: \n            string_status = string_status + '\"' + file_node +  '\" isn\\'t pointing to the the network drive. Your references should be sourced from the network.\\n'\n    else: \n        string_status = str(issues_found) + ' issues found. All references were sourced from the network'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n    \n# Item 6 - Unparented Objects =========================================================================\ndef check_unparented_objects():\n    item_name = checklist_items.get(6)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(6)[1]\n    unparented_objects = []\n\n    # Count Unparented Objects\n    geo_dag_nodes = cmds.ls(geometry=True)\n    for obj in geo_dag_nodes:\n        first_parent = cmds.listRelatives(obj, p=True, f=True) # Check if it returned something?\n        children_members = cmds.listRelatives(first_parent[0], c=True, type=\"transform\") or []\n        parents_members = cmds.listRelatives(first_parent[0], ap=True, type=\"transform\") or []\n        if len(children_members) + len(parents_members) == 0:\n            if cmds.nodeType(obj) != \"mentalrayIblShape\":\n                unparented_objects.append(obj)\n\n    if len(unparented_objects) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('No unparented objects were found.')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_unparented_objects())\n        issues_found = len(unparented_objects)\n        \n    cmds.text(\"output_\" + item_id, e=True, l=len(unparented_objects) )\n    \n    # Patch Function ----------------------\n    def warning_unparented_objects():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message= str(len(unparented_objects)) + ' unparented object(s) found in this scene. \\nIt\\'s likely that these objects need to be part of a hierarchy.\\n\\n(Too see a list of objects, generate a full report)',\n                    button=['OK', 'Ignore Issue'],\n                    defaultButton='OK',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"warning\")\n\n        if user_input == '':\n            pass\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    issue_string = \"issues\"\n    if issues_found == 1:\n        issue_string = \"issue\"\n    if issues_found > 0:\n        string_status = str(issues_found) + ' ' + issue_string + ' found.\\n'\n        for obj in unparented_objects: \n            string_status = string_status + '\"' + obj +  '\" has no parent or child nodes. It should likely be part of a hierarchy.\\n'\n        string_status = string_status[:-1]\n    else: \n        string_status = str(issues_found) + ' issues found. No unparented objects were found.'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n\n\n# Item 7 - Total Triangle Count =========================================================================\ndef check_total_triangle_count():\n    item_name = checklist_items.get(7)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(7)[1][1]\n    inbetween_value = checklist_items.get(7)[1][0]\n    unparented_objects = []\n    \n    # Check Custom Value\n    custom_settings_failed = False\n    if isinstance(expected_value, int) == False or isinstance(inbetween_value, int) == False:\n        custom_settings_failed = True\n\n    all_poly_count = cmds.ls(type=\"mesh\", flatten=True)\n    scene_tri_count = 0;\n    smoothedObjCount = 0;\n    \n    for obj in all_poly_count:\n        smooth_level = cmds.getAttr(obj + \".smoothLevel\")\n        smooth_state = cmds.getAttr(obj + \".displaySmoothMesh\")\n        total_tri_count = cmds.polyEvaluate(obj, t=True)\n        total_edge_count = cmds.polyEvaluate(obj, e=True)\n        total_face_count = cmds.polyEvaluate(obj, f=True)\n\n        if smooth_state > 0 and smooth_level != 0:\n            one_subdiv_tri_count = (total_edge_count * 4)\n            if smooth_level > 1:\n                multi_subdiv_tri_count = one_subdiv_tri_count * (4 ** (smooth_level-1))\n                scene_tri_count = scene_tri_count + multi_subdiv_tri_count\n            else:\n                scene_tri_count += one_subdiv_tri_count\n        else:\n            scene_tri_count += total_tri_count\n                \n    if scene_tri_count < expected_value and scene_tri_count > inbetween_value:\n        cmds.button(\"status_\" + item_id, e=True, bgc=warning_color, l= '', c=lambda args: warning_total_triangle_count())\n        issues_found = 0;\n        patch_message = 'Your scene has ' + str(scene_tri_count) + ' triangles, which is high. \\nConsider optimizing it if possible.'\n        cancel_message= \"Ignore Warning\"\n    elif scene_tri_count < expected_value:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('Your scene has ' + str(scene_tri_count) +  ' triangles. \\nGood job keeping the triangle count low!.')) \n        issues_found = 0;\n        patch_message = ''\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_total_triangle_count())\n        issues_found = 1;\n        patch_message = 'Your scene has ' + str(scene_tri_count) + ' triangles. You should try to keep it under ' + str(expected_value) + '.\\n\\n' + 'In case you see a different number on your \"Heads Up Display > Poly Count\" option.  It\\'s likely that you have \"shapeOrig\" nodes in your scene. These are intermediate shape nodes usually created by deformers. If you don\\'t have deformations on your scene, you can delete these to reduce triangle count.\\n'\n        cancel_message= \"Ignore Issue\"\n        \n    cmds.text(\"output_\" + item_id, e=True, l=scene_tri_count )\n    \n    # Patch Function ----------------------\n    def warning_total_triangle_count():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message= patch_message,\n                    button=['OK', cancel_message],\n                    defaultButton='OK',\n                    cancelButton=cancel_message,\n                    dismissString=cancel_message, \n                    icon=\"warning\")\n\n        if user_input == \"Ignore Warning\":\n            cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message(str(issues_found) + ' issues found. Your scene has ' + str(scene_tri_count) +  ' triangles, which is high. \\nConsider optimizing it if possible.') )\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n                    \n    # Return string for report ------------\n    if scene_tri_count > inbetween_value and scene_tri_count < expected_value:\n        string_status = str(issues_found) + ' issues found. Your scene has ' + str(scene_tri_count) +  ' triangles, which is high. Consider optimizing it if possible.' \n    elif scene_tri_count < expected_value:\n        string_status = str(issues_found) + ' issues found. Your scene has ' + str(scene_tri_count) +  ' triangles. Good job keeping the triangle count low!.' \n    else: \n        string_status = str(issues_found) + ' issue found. Your scene has ' + str(scene_tri_count) + ' triangles. You should try to keep it under ' + str(expected_value) + '.'\n    if custom_settings_failed:\n        string_status = '1 issue found. The custom value provided couldn\\'t be used to check your total triangle count'\n        cmds.button(\"status_\" + item_id, e=True, bgc=exception_color, l= '', c=lambda args: print_message('The custom value provided couldn\\'t be used to check your total triangle count', as_warning=True))\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n\n# Item 8 - Total Poly Object Count =========================================================================\ndef check_total_poly_object_count():\n    item_name = checklist_items.get(8)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(8)[1][1]\n    inbetween_value = checklist_items.get(8)[1][0]\n    \n    # Check Custom Values\n    custom_settings_failed = False\n    if isinstance(expected_value, int) == False or isinstance(inbetween_value, int) == False:\n        custom_settings_failed = True\n    \n    all_polymesh = cmds.ls(type= \"mesh\")\n\n    if len(all_polymesh) < expected_value and len(all_polymesh) > inbetween_value:\n        cmds.button(\"status_\" + item_id, e=True, bgc=warning_color, l= '', c=lambda args: warning_total_poly_object_count())\n        issues_found = 0;\n        patch_message = 'Your scene contains \"' + str(len(all_polymesh)) + '\" polygon meshes, which is a high number. \\nConsider optimizing it if possible.'\n        cancel_message= \"Ignore Warning\"\n    elif len(all_polymesh) < expected_value:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('Your scene contains \"' +str(len(all_polymesh)) + '\" polygon meshes.')) \n        issues_found = 0;\n        patch_message = ''\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_total_poly_object_count())\n        issues_found = 1;\n        patch_message = str(len(all_polymesh)) + ' polygon meshes in your scene. \\nTry to keep this number under ' + str(expected_value) + '.'\n        cancel_message= \"Ignore Issue\"\n        \n    cmds.text(\"output_\" + item_id, e=True, l=len(all_polymesh) )\n    \n    # Patch Function ----------------------\n    def warning_total_poly_object_count():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message= patch_message,\n                    button=['OK', cancel_message],\n                    defaultButton='OK',\n                    cancelButton=cancel_message,\n                    dismissString=cancel_message, \n                    icon=\"warning\")\n\n        if user_input == \"Ignore Warning\":\n            cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message(str(issues_found) + ' issues found. Your scene contains ' + str(len(all_polymesh)) +  ' polygon meshes, which is a high number. \\nConsider optimizing it if possible.') )\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    if len(all_polymesh) < expected_value and len(all_polymesh) > inbetween_value:\n        string_status = str(issues_found) + ' issues found. Your scene contains \"' +  str(len(all_polymesh)) + '\" polygon meshes, which is a high number. Consider optimizing it if possible.'\n    elif len(all_polymesh) < expected_value:\n        string_status = str(issues_found) + ' issues found. Your scene contains \"' + str(len(all_polymesh)) + '\" polygon meshes.'\n    else: \n        string_status = str(issues_found) + ' issue found. Your scene contains \"' + str(len(all_polymesh)) + '\" polygon meshes. Try to keep this number under \"' + str(expected_value) + '\".'\n    if custom_settings_failed:\n        string_status = '1 issue found. The custom value provided couldn\\'t be used to check your total poly count'\n        cmds.button(\"status_\" + item_id, e=True, bgc=exception_color, l= '', c=lambda args: print_message('The custom value provided couldn\\'t be used to check your total poly count', as_warning=True))\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n    \n    \n# Item 9 - Shadow Casting Light Count =========================================================================\ndef check_shadow_casting_light_count():\n    item_name = checklist_items.get(9)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(9)[1][1]\n    inbetween_value = checklist_items.get(9)[1][0]\n    \n    # Check Custom Values\n    custom_settings_failed = False\n    if isinstance(expected_value, int) == False or isinstance(inbetween_value, int) == False:\n        custom_settings_failed = True\n    \n    all_lights = cmds.ls(lights=True)\n    shadow_casting_lights = []\n   \n    for light in all_lights:\n        shadow_state = cmds.getAttr (light + \".useRayTraceShadows\")\n        if shadow_state == 1:\n            shadow_casting_lights.append(light)\n\n    if len(shadow_casting_lights) < expected_value and len(shadow_casting_lights) > inbetween_value:\n        cmds.button(\"status_\" + item_id, e=True, bgc=warning_color, l= '', c=lambda args: warning_shadow_casting_light_count())\n        issues_found = 0;\n        patch_message = 'Your scene contains \"' + str(len(shadow_casting_lights)) + '\" shadow casting lights, which is a high number. \\nConsider optimizing it if possible.'\n        cancel_message= \"Ignore Warning\"\n    elif len(shadow_casting_lights) < expected_value:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('Your scene contains \"' +str(len(shadow_casting_lights)) + '\" shadow casting lights.')) \n        issues_found = 0;\n        patch_message = ''\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_shadow_casting_light_count())\n        issues_found = 1;\n        patch_message = 'Your scene contains ' + str(len(shadow_casting_lights)) + ' shadow casting lights.\\nTry to keep this number under ' + str(expected_value) + '.'\n        cancel_message= \"Ignore Issue\"\n        \n    cmds.text(\"output_\" + item_id, e=True, l=len(shadow_casting_lights) )\n    \n    # Patch Function ----------------------\n    def warning_shadow_casting_light_count():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message= patch_message,\n                    button=['OK', cancel_message],\n                    defaultButton='OK',\n                    cancelButton=cancel_message,\n                    dismissString=cancel_message, \n                    icon=\"warning\")\n\n        if user_input == \"Ignore Warning\":\n            cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message(str(issues_found) + ' issues found. Your scene contains ' + str(len(shadow_casting_lights)) +  ' shadow casting lights, which is a high number. \\nConsider optimizing it if possible.') )\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    if len(shadow_casting_lights) < expected_value and len(shadow_casting_lights) > inbetween_value:\n        string_status = str(issues_found) + ' issues found. Your scene contains \"' +  str(len(shadow_casting_lights)) + '\" shadow casting lights, which is a high number. Consider optimizing it if possible.'\n    elif len(shadow_casting_lights) < expected_value:\n        string_status = str(issues_found) + ' issues found. Your scene contains \"' + str(len(shadow_casting_lights)) + '\" shadow casting lights.'\n    else: \n        string_status = str(issues_found) + ' issue found. Your scene contains \"' + str(len(shadow_casting_lights)) + '\" shadow casting lights, you should keep this number under \"' + str(expected_value) + '\".'\n    if custom_settings_failed:\n        string_status = '1 issue found. The custom value provided couldn\\'t be used to check your shadow casting lights.'\n        cmds.button(\"status_\" + item_id, e=True, bgc=exception_color, l= '', c=lambda args: print_message('The custom value provided couldn\\'t be used to check your shadow casting lights.', as_warning=True))\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n    \n    \n# Item 10 - Redshift Shadow Casting Light Count =========================================================================\ndef check_rs_shadow_casting_light_count():\n    item_name = checklist_items.get(10)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(10)[1][1]\n    inbetween_value = checklist_items.get(10)[1][0]\n    \n    # Check Custom Values\n    custom_settings_failed = False\n    if isinstance(expected_value, int) == False or isinstance(inbetween_value, int) == False:\n        custom_settings_failed = True\n    \n    rs_physical_type = \"RedshiftPhysicalLight\" # Used to check if Redshift is loaded\n    \n    node_types = cmds.ls(nodeTypes=True)\n    \n    if rs_physical_type in node_types: # is RS loaded?\n    \n        rs_physical = cmds.ls(type=rs_physical_type)\n        rs_photometric = cmds.ls(type=\"RedshiftIESLight\")\n        rs_portal = cmds.ls(type=\"RedshiftPortalLight\")\n        rs_dome = cmds.ls(type=\"RedshiftDomeLight\")\n        \n        all_rs_lights = []\n        all_rs_lights.extend(rs_physical)\n        all_rs_lights.extend(rs_photometric)\n        all_rs_lights.extend(rs_portal)\n        all_rs_lights.extend(rs_dome)\n        \n        rs_shadow_casting_lights = []\n       \n        for rs_light in all_rs_lights:\n            if rs_light != \"<done>\":\n                if cmds.objectType(rs_light) != \"RedshiftPortalLight\": # For some odd reason portal lights use an attribute called \"shadows\" instead of \"shadow\"\n                    rs_shadow_state = cmds.getAttr (rs_light + \".shadow\")\n                else:\n                    rs_shadow_state = cmds.getAttr (rs_light + \".shadows\")\n                if rs_shadow_state == 1:\n                    rs_shadow_casting_lights.append(rs_light)\n      \n       \n        if len(rs_shadow_casting_lights) < expected_value and len(rs_shadow_casting_lights) > inbetween_value:\n            cmds.button(\"status_\" + item_id, e=True, bgc=warning_color, l= '', c=lambda args: warning_rs_shadow_casting_light_count())\n            issues_found = 0;\n            patch_message = 'Your scene contains \"' + str(len(rs_shadow_casting_lights)) + '\" Redshift shadow casting lights, which is a high number. \\nConsider optimizing it if possible.'\n            cancel_message= \"Ignore Warning\"\n        elif len(rs_shadow_casting_lights) < expected_value:\n            cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('Your scene contains \"' +str(len(rs_shadow_casting_lights)) + '\" Redshift shadow casting lights.')) \n            issues_found = 0;\n            patch_message = ''\n        else: \n            cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_rs_shadow_casting_light_count())\n            issues_found = 1;\n            patch_message = 'Your scene contains ' + str(len(rs_shadow_casting_lights)) + ' Redshift shadow casting lights.\\nTry to keep this number under ' + str(expected_value) + '.'\n            cancel_message= \"Ignore Issue\"\n            \n        cmds.text(\"output_\" + item_id, e=True, l=len(rs_shadow_casting_lights) )\n        \n        # Patch Function ----------------------\n        def warning_rs_shadow_casting_light_count():\n            user_input = cmds.confirmDialog(\n                        title=item_name,\n                        message= patch_message,\n                        button=['OK', cancel_message],\n                        defaultButton='OK',\n                        cancelButton=cancel_message,\n                        dismissString=cancel_message, \n                        icon=\"warning\")\n\n            if user_input == \"Ignore Warning\":\n                cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message(str(issues_found) + ' issues found. Your scene contains ' + str(len(rs_shadow_casting_lights)) +  ' Redshift shadow casting lights, which is a high number. \\nConsider optimizing it if possible.') )\n            else:\n                cmds.button(\"status_\" + item_id, e=True, l= '')\n        \n        # Return string for report ------------\n        if len(rs_shadow_casting_lights) < expected_value and len(rs_shadow_casting_lights) > inbetween_value:\n            string_status = str(issues_found) + ' issues found. Your scene contains \"' +  str(len(rs_shadow_casting_lights)) + '\" Redshift shadow casting lights, which is a high number. Consider optimizing it if possible.'\n        elif len(rs_shadow_casting_lights) < expected_value:\n            string_status = str(issues_found) + ' issues found. Your scene contains \"' + str(len(rs_shadow_casting_lights)) + '\" Redshift shadow casting lights.'\n        else: \n            string_status = str(issues_found) + ' issue found. Your scene contains \"' + str(len(rs_shadow_casting_lights)) + '\" Redshift shadow casting lights, you should keep this number under \"' + str(expected_value) + '\".'\n        if custom_settings_failed:\n            string_status = '1 issue found. The custom value provided couldn\\'t be used to check your Redshift shadow casting lights.'\n            cmds.button(\"status_\" + item_id, e=True, bgc=exception_color, l= '', c=lambda args: print_message('The custom value provided couldn\\'t be used to check your Redshift shadow casting lights.', as_warning=True))\n        return '\\n*** ' + item_name + \" ***\\n\" + string_status\n    else:\n        cmds.button(\"status_\" + item_id, e=True, bgc=exception_color, l= '', c=lambda args: print_message('No Redshift light types exist in the scene. Redshift plugin doesn\\'t seem to be loaded.', as_warning=True))\n        cmds.text(\"output_\" + item_id, e=True, l='No Redshift' )\n        return '\\n*** ' + item_name + \" ***\\n\" + '0 issues found, but no Redshift light types exist in the scene. Redshift plugin doesn\\'t seem to be loaded.'\n\n# Item 11 - Arnold Shadow Casting Light Count =========================================================================\ndef check_ai_shadow_casting_light_count():\n    item_name = checklist_items.get(11)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(11)[1][1]\n    inbetween_value = checklist_items.get(11)[1][0]\n    \n    # Check Custom Values\n    custom_settings_failed = False\n    if isinstance(expected_value, int) == False or isinstance(inbetween_value, int) == False:\n        custom_settings_failed = True\n    \n    \n    ai_physical_type = \"aiAreaLight\" # Used to check if Arnold is loaded\n    \n    node_types = cmds.ls(nodeTypes=True)\n\n    if ai_physical_type in node_types: # is Arnold loaded?\n    \n        ai_sky_dome = cmds.ls(type=\"aiSkyDomeLight\")\n        ai_mesh = cmds.ls(type=\"aiMeshLight\")\n        ai_photometric = cmds.ls(type=\"aiPhotometricLight\")\n        ai_area = cmds.ls(type=ai_physical_type)\n        #ai_portal = cmds.ls(type=\"aiLightPortal\")\n        \n        all_ai_lights = []\n        all_ai_lights.extend(ai_sky_dome)\n        all_ai_lights.extend(ai_mesh)\n        all_ai_lights.extend(ai_photometric)\n        all_ai_lights.extend(ai_area)\n        #all_ai_lights.extend(ai_portal)\n        \n        ai_shadow_casting_lights = []\n       \n        for ai_light in all_ai_lights :\n            rs_shadow_state = cmds.getAttr (ai_light + \".aiCastShadows\")\n            if rs_shadow_state == 1:\n                ai_shadow_casting_lights.append(ai_light)\n      \n       \n        if len(ai_shadow_casting_lights) < expected_value and len(ai_shadow_casting_lights) > inbetween_value:\n            cmds.button(\"status_\" + item_id, e=True, bgc=warning_color, l= '', c=lambda args: warning_ai_shadow_casting_light_count())\n            issues_found = 0;\n            patch_message = 'Your scene contains \"' + str(len(ai_shadow_casting_lights)) + '\" Arnold shadow casting lights, which is a high number. \\nConsider optimizing it if possible.'\n            cancel_message= \"Ignore Warning\"\n        elif len(ai_shadow_casting_lights) < expected_value:\n            cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('Your scene contains \"' +str(len(ai_shadow_casting_lights)) + '\" Arnold shadow casting lights.')) \n            issues_found = 0;\n            patch_message = ''\n        else: \n            cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_ai_shadow_casting_light_count())\n            issues_found = 1;\n            patch_message = 'Your scene contains ' + str(len(ai_shadow_casting_lights)) + ' Arnold shadow casting lights.\\nTry to keep this number under ' + str(expected_value) + '.'\n            cancel_message= \"Ignore Issue\"\n            \n        cmds.text(\"output_\" + item_id, e=True, l=len(ai_shadow_casting_lights) )\n        \n        # Patch Function ----------------------\n        def warning_ai_shadow_casting_light_count():\n            user_input = cmds.confirmDialog(\n                        title=item_name,\n                        message= patch_message,\n                        button=['OK', cancel_message],\n                        defaultButton='OK',\n                        cancelButton=cancel_message,\n                        dismissString=cancel_message, \n                        icon=\"warning\")\n\n            if user_input == \"Ignore Warning\":\n                cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message(str(issues_found) + ' issues found. Your scene contains ' + str(len(ai_shadow_casting_lights)) +  ' Arnold shadow casting lights, which is a high number. \\nConsider optimizing it if possible.') )\n            else:\n                cmds.button(\"status_\" + item_id, e=True, l= '')\n        \n        # Return string for report ------------\n        if len(ai_shadow_casting_lights) < expected_value and len(ai_shadow_casting_lights) > inbetween_value:\n            string_status = str(issues_found) + ' issues found. Your scene contains \"' +  str(len(ai_shadow_casting_lights)) + '\" Arnold shadow casting lights, which is a high number. Consider optimizing it if possible.'\n        elif len(ai_shadow_casting_lights) < expected_value:\n            string_status = str(issues_found) + ' issues found. Your scene contains \"' + str(len(ai_shadow_casting_lights)) + '\" Arnold shadow casting lights.'\n        else: \n            string_status = str(issues_found) + ' issue found. Your scene contains \"' + str(len(ai_shadow_casting_lights)) + '\" Arnold shadow casting lights, you should keep this number under \"' + str(expected_value) + '\".'\n        if custom_settings_failed:\n            string_status = '1 issue found. The custom value provided couldn\\'t be used to check your Arnold shadow casting lights.'\n            cmds.button(\"status_\" + item_id, e=True, bgc=exception_color, l= '', c=lambda args: print_message('The custom value provided couldn\\'t be used to check your Arnold shadow casting lights.', as_warning=True))\n        return '\\n*** ' + item_name + \" ***\\n\" + string_status\n    else:\n        cmds.button(\"status_\" + item_id, e=True, bgc=exception_color, l= '', c=lambda args: print_message('No Arnold light types exist in the scene. Arnold plugin doesn\\'t seem to be loaded.', as_warning=True))\n        cmds.text(\"output_\" + item_id, e=True, l='No Arnold' )\n        return '\\n*** ' + item_name + \" ***\\n\" + '0 issues found, but no Arnold light types exist in the scene. Arnold plugin doesn\\'t seem to be loaded.'\n\n# Item 12 - Default Object Names ========================================================================= \ndef check_default_object_names():\n    item_name = checklist_items.get(12)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(12)[1]\n    \n    offending_objects = []\n    possible_offenders = []\n\n    default_object_names = [\"nurbsSphere\", \"nurbsCube\", \"nurbsCylinder\", \"nurbsCone\",\\\n     \"nurbsPlane\", \"nurbsTorus\", \"nurbsCircle\", \"nurbsSquare\", \"pSphere\", \"pCube\", \"pCylinder\",\\\n     \"pCone\", \"pPlane\", \"pTorus\", \"pPrism\", \"pPyramid\", \"pPipe\", \"pHelix\", \"pSolid\", \"rsPhysicalLight\",\\\n     \"rsIESLight\", \"rsPortalLight\", \"aiAreaLight\" ,\"rsDomeLight\", \"aiPhotometricLight\", \"aiLightPortal\", \\\n     \"ambientLight\", \"directionalLight\", \"pointLight\", \"spotLight\", \"areaLight\", \"volumeLight\"]\n     \n    all_objects = cmds.ls(lt=True, lf=True, g=True)\n    \n    for obj in all_objects:\n        for def_name in default_object_names:\n            if obj.startswith(def_name):\n                offending_objects.append(obj)\n            elif def_name in obj:\n                possible_offenders.append(obj)\n    \n    # Manage Strings\n    if len(possible_offenders) == 1:\n        patch_message_warning = str(len(possible_offenders)) + ' object contains a string extremelly similar to the default names.\\n(Ignore this warning if the name describes your object properly)'\n    else:\n        patch_message_warning = str(len(possible_offenders)) + ' objects contain a string extremelly similar to the default names.\\n(Ignore this warning if the name describes your object properly)'\n    \n    if len(offending_objects) == 1:\n        patch_message_error = str(len(offending_objects)) + ' object was not named properly. \\nPlease rename your objects descriptively.'\n    else:\n        patch_message_error = str(len(offending_objects)) + ' objects were not named properly. \\nPlease rename your objects descriptively.'\n    \n    # Manage Buttons\n    if len(possible_offenders) != 0 and len(offending_objects) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=warning_color, l= '', c=lambda args: warning_default_object_names()) \n        issues_found = 0\n    elif len(offending_objects) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('No unnamed objects were found, well done!')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_default_object_names())\n        issues_found = len(offending_objects)\n    \n    # Manage Message\n    patch_message = ''\n    cancel_message = 'Ignore Issue'\n            \n    if len(possible_offenders) != 0 and len(offending_objects) == 0:\n        cmds.text(\"output_\" + item_id, e=True, l='[ ' + str(len(possible_offenders)) + ' ]' )\n        patch_message = patch_message_warning\n        cancel_message = 'Ignore Warning'\n    elif len(possible_offenders) == 0:\n        cmds.text(\"output_\" + item_id, e=True, l=str(len(offending_objects)))\n        patch_message = patch_message_error\n    else:\n        cmds.text(\"output_\" + item_id, e=True, l=str(len(offending_objects)) + ' + [ ' + str(len(possible_offenders)) + ' ]' )\n        patch_message = patch_message_error + '\\n\\n' + patch_message_warning\n        return_message = patch_message_error + '\\n' + patch_message_warning\n        \n    # Patch Function ----------------------\n    def warning_default_object_names():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message= patch_message,\n                    button=['OK', cancel_message],\n                    defaultButton='OK',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"warning\")\n\n        if user_input == 'Ignore Warning':\n            cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: warning_default_object_names()) \n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    issue_string = \"issues\"\n    if issues_found == 1:\n        issue_string = \"issue\"\n    if issues_found > 0 or len(possible_offenders) > 0:\n        string_status = str(issues_found) + ' ' + issue_string + ' found.\\n'\n        for obj in offending_objects: \n            string_status = string_status + '\"' + obj +  '\" was not named properly. Please rename your object descriptively.\\n'\n        if len(offending_objects) != 0 and len(possible_offenders) == 0:\n            string_status = string_status[:-1]\n        \n        for obj in possible_offenders: \n            string_status = string_status + '\"' + obj +  '\"  contains a string extremelly similar to the default names.\\n'\n        if len(possible_offenders) != 0:\n            string_status = string_status[:-1]\n    else: \n        string_status = str(issues_found) + ' issues found. No unnamed objects were found, well done!'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n\n\n# Item 13 - Objects Assigned to lambert1 =========================================================================\ndef check_objects_assigned_to_lambert1():\n    item_name = checklist_items.get(13)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(13)[1]\n    \n    lambert1_objects = cmds.sets(\"initialShadingGroup\", q=True) or []\n    \n    if len(lambert1_objects) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('No objects were assigned to lambert1.')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_objects_assigned_to_lambert1())\n        issues_found = len(lambert1_objects)\n        \n    cmds.text(\"output_\" + item_id, e=True, l=len(lambert1_objects) )\n    \n    if len(lambert1_objects) == 1:\n        patch_message = str(len(lambert1_objects)) + ' object is assigned to lambert1. \\nMake sure no objects are assigned to lambert1.\\n\\n(Too see a list of objects, generate a full report)'\n    else:\n        patch_message = str(len(lambert1_objects)) + ' objects are assigned to lambert1. \\nMake sure no objects are assigned to lambert1.\\n\\n(Too see a list of objects, generate a full report)'\n    \n    # Patch Function ----------------------\n    def warning_objects_assigned_to_lambert1():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message= patch_message,\n                    button=['OK', 'Ignore Issue'],\n                    defaultButton='OK',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"warning\")\n\n        if user_input == '':\n            pass\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    issue_string = \"issues\"\n    if issues_found == 1:\n        issue_string = \"issue\"\n    if issues_found > 0:\n        string_status = str(issues_found) + ' ' + issue_string + ' found.\\n'\n        for obj in lambert1_objects: \n            string_status = string_status + '\"' + obj +  '\"  is assigned to lambert1. It should be assigned to another shader.\\n'\n        string_status = string_status[:-1]\n    else: \n        string_status = str(issues_found) + ' issues found. No objects are assigned to lambert1.'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n\n# Item 14 - Ngons =========================================================================\ndef check_ngons():\n    item_name = checklist_items.get(14)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(14)[1]\n    \n\n\n    ngon_mel_command = 'string $ngons[] = `polyCleanupArgList 3 { \"1\",\"2\",\"1\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\",\"1e-005\",\"0\",\"1e-005\",\"0\",\"1e-005\",\"0\",\"-1\",\"0\" }`;'\n    ngons_list = mel.eval(ngon_mel_command)\n    cmds.select(clear=True)\n    \n    print('') # Clear Any Warnings\n \n\n    if len(ngons_list) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('No ngons were found in your scene. Good job!')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_ngons())\n        issues_found = len(ngons_list)\n        \n    cmds.text(\"output_\" + item_id, e=True, l=len(ngons_list) )\n    \n    if len(ngons_list) == 1:\n        patch_message = str(len(ngons_list)) + ' ngon found in your scene. \\nMake sure no faces have more than 4 sides.\\n\\n(Too see a list of objects, generate a full report)'\n    else:\n        patch_message = str(len(ngons_list)) + ' ngons found in your scene. \\nMake sure no faces have more than 4 sides.\\n\\n(Too see a list of objects, generate a full report)'\n    \n    # Patch Function ----------------------\n    def warning_ngons():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message= patch_message,\n                    button=['OK', 'Select Ngons', 'Ignore Issue' ],\n                    defaultButton='OK',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"warning\")\n\n        if user_input == 'Select Ngons':\n            ngons_list = mel.eval(ngon_mel_command)\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    issue_string = \"issues\"\n    if issues_found == 1:\n        issue_string = \"issue\"\n    if issues_found > 0:\n        string_status = str(issues_found) + ' ' + issue_string + ' found.\\n'\n        for obj in ngons_list: \n            string_status = string_status + '\"' + obj +  '\"  is an ngon (face with more than 4 sides).\\n'\n        string_status = string_status[:-1]\n    else: \n        string_status = str(issues_found) + ' issues found. No ngons were found in your scene.'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n\n# Item 15 - Non-manifold Geometry =========================================================================\ndef check_non_manifold_geometry():\n    item_name = checklist_items.get(15)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(15)[1]\n    \n    nonmanifold_geo = []\n    nonmanifold_verts = []\n    \n    all_geo = cmds.ls(type='mesh')\n   \n    for geo in all_geo:\n        obj_non_manifold_verts = cmds.polyInfo(geo, nmv=True) or []\n        if len(obj_non_manifold_verts) > 0:\n            nonmanifold_geo.append(geo)\n            nonmanifold_verts.append(obj_non_manifold_verts)\n\n    if len(nonmanifold_geo) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('No objects with non-manifold geometry in your scene. Well Done!')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_non_manifold_geometry())\n        issues_found = len(nonmanifold_geo)\n        \n    cmds.text(\"output_\" + item_id, e=True, l=len(nonmanifold_geo) )\n    \n    if len(nonmanifold_geo) == 1:\n        patch_message = str(len(nonmanifold_geo)) + ' object with non-manifold geometry was found in your scene. \\n\\n(Too see a list of objects, generate a full report)'\n    else:\n        patch_message = str(len(nonmanifold_geo)) + ' objects with non-manifold geometry were found in your scene. \\n\\n(Too see a list of objects, generate a full report)'\n    \n    # Patch Function ----------------------\n    def warning_non_manifold_geometry():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message= patch_message,\n                    button=['OK', 'Select Non-manifold Vertices', 'Ignore Issue' ],\n                    defaultButton='OK',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"warning\")\n                    \n        \n        if user_input == 'Select Non-manifold Vertices':\n            cmds.select(clear=True)\n            for verts in nonmanifold_verts:\n                    cmds.select(verts, add=True)\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    issue_string = \"issues\"\n    if issues_found == 1:\n        issue_string = \"issue\"\n    if issues_found > 0:\n        string_status = str(issues_found) + ' ' + issue_string + ' found.\\n'\n        for obj in nonmanifold_geo: \n            string_status = string_status + '\"' + obj +  '\"  has non-manifold geometry.\\n'\n        string_status = string_status[:-1]\n    else: \n        string_status = str(issues_found) + ' issues found. No non-manifold geometry found in your scene.'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n\n# Item 16 - Empty UV Sets =========================================================================\ndef check_empty_uv_sets():\n    item_name = checklist_items.get(16)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(16)[1]\n    \n    objects_extra_empty_uv_sets = []\n    objects_single_empty_uv_sets = []\n    \n    all_geo = cmds.ls(type='mesh')\n    \n    for obj in all_geo:\n        all_uv_sets = cmds.polyUVSet(obj, q=True, allUVSets=True)\n        if len(all_uv_sets) > 1:\n            for uv_set in all_uv_sets:\n                uv_count = cmds.polyEvaluate(obj, uv=True, uvs=uv_set)\n                if uv_count == 0:\n                    objects_extra_empty_uv_sets.append(obj)\n        else:\n            for uv_set in all_uv_sets:\n                uv_count = cmds.polyEvaluate(obj, uv=True, uvs=uv_set)\n                if uv_count == 0:\n                    objects_single_empty_uv_sets.append(obj)\n\n    if len(objects_extra_empty_uv_sets) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('No empty UV sets.')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_empty_uv_sets())\n        issues_found = len(objects_extra_empty_uv_sets)\n        \n    cmds.text(\"output_\" + item_id, e=True, l=len(objects_extra_empty_uv_sets) )\n    \n    if len(objects_extra_empty_uv_sets) == 1:\n        patch_message = str(len(objects_extra_empty_uv_sets)) + ' object found contaning multiple UV Sets and empty UV Sets. \\n\\n(Too see a list of objects, generate a full report)'\n    else:\n        patch_message = str(len(objects_extra_empty_uv_sets)) + ' objects found contaning multiple UV Sets and empty UV Sets. \\n\\n(Too see a list of objects, generate a full report)'\n    \n    # Patch Function ----------------------\n    def warning_empty_uv_sets():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message= patch_message,\n                    button=['OK', 'Select Objects with Empty UV Sets', 'Ignore Issue' ],\n                    defaultButton='OK',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"warning\")\n                    \n        \n        if user_input == 'Select Objects with Empty UV Sets':\n            cmds.select(clear=True)\n            for obj in objects_extra_empty_uv_sets:\n                object_transform = cmds.listRelatives(obj, allParents=True, type='transform') or []\n                if len(object_transform) > 0:\n                    cmds.select(object_transform, add=True)\n                else:\n                    cmds.select(obj, add=True)\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    issue_string = \"issues\"\n    if issues_found == 1:\n        issue_string = \"issue\"\n    if issues_found > 0:\n        string_status = str(issues_found) + ' ' + issue_string + ' found.\\n'\n        for obj in objects_extra_empty_uv_sets: \n            string_status = string_status + '\"' + obj +  '\" has multiple UV Sets and Empty UV Sets.\\n'\n        string_status = string_status[:-1]\n    else: \n        string_status = str(issues_found) + ' issues found. No geometry with multiple UV Sets and Empty UV Sets.'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n\n\n# Item 17 - Frozen Transforms =========================================================================\ndef check_frozen_transforms():\n    item_name = checklist_items.get(17)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(17)[1]\n    \n    objects_no_frozen_transforms = []\n    \n    all_transforms = cmds.ls(type='transform')\n        \n    for transform in all_transforms:\n        children = cmds.listRelatives(transform, c=True, pa=True) or []\n        for child in children:\n            object_type = cmds.objectType(child)\n            if object_type == 'mesh' or object_type == 'nurbsCurve':\n                if cmds.getAttr(transform + \".rotateX\") != 0 or cmds.getAttr(transform + \".rotateY\") != 0 or cmds.getAttr(transform + \".rotateZ\") != 0:\n                    if len(cmds.listConnections(transform + \".rotateX\") or []) == 0 and len(cmds.listConnections(transform + \".rotateY\") or []) == 0 and len(cmds.listConnections(transform + \".rotateZ\") or []) == 0 and len(cmds.listConnections(transform + \".rotate\") or []) == 0:\n                        objects_no_frozen_transforms.append(transform)\n                       \n    if len(objects_no_frozen_transforms) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('No empty UV sets.')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=warning_color, l= '?', c=lambda args: warning_frozen_transforms())\n        issues_found = len(objects_no_frozen_transforms)\n        \n    cmds.text(\"output_\" + item_id, e=True, l=len(objects_no_frozen_transforms) )\n    \n    if len(objects_no_frozen_transforms) == 1:\n        patch_message = str(len(objects_no_frozen_transforms)) + ' object has un-frozen transformations. \\n\\n(Too see a list of objects, generate a full report)'\n    else:\n        patch_message = str(len(objects_no_frozen_transforms)) + ' objects have un-frozen transformations. \\n\\n(Too see a list of objects, generate a full report)'\n    \n    # Patch Function ----------------------\n    def warning_frozen_transforms():\n        user_input = cmds.confirmDialog(\n                    title=item_name,\n                    message= patch_message,\n                    button=['OK', 'Select Objects with un-frozen transformations', 'Ignore Warning' ],\n                    defaultButton='OK',\n                    cancelButton='Ignore Warning',\n                    dismissString='Ignore Warning', \n                    icon=\"warning\")\n                    \n        if user_input == 'Select Objects with un-frozen transformations':\n            cmds.select(objects_no_frozen_transforms)\n        elif user_input == 'Ignore Warning':\n            cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '')\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    issue_string = \"issues\"\n    if issues_found == 1:\n        issue_string = \"issue\"\n    if issues_found > 0:\n        string_status = str(issues_found) + ' ' + issue_string + ' found.\\n'\n        for obj in objects_no_frozen_transforms: \n            string_status = string_status + '\"' + obj +  '\" has un-frozen transformations.\\n'\n        string_status = string_status[:-1]\n    else: \n        string_status = str(issues_found) + ' issues found. No objects have un-frozen transformations.'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n\n# Item 18 - Animated Visibility =========================================================================\ndef check_animated_visibility():\n    item_name = checklist_items.get(18)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(18)[1]\n    \n    objects_animated_visibility = []\n    objects_hidden = []\n    \n    all_transforms = cmds.ls(type='transform')\n    \n    for transform in all_transforms:\n        attributes = cmds.listAttr(transform)\n        if 'visibility' in attributes:\n            if cmds.getAttr(transform + \".visibility\") == 0:\n                children = cmds.listRelatives(transform, s=True, pa=True) or []\n                if len(children) != 0:\n                    if cmds.nodeType(children[0]) != \"camera\":\n                        objects_hidden.append(transform)\n        input_nodes = cmds.listConnections(transform + \".visibility\", destination=False, source=True) or []\n        for node in input_nodes:\n            if 'animCurve' in cmds.nodeType(node):\n                objects_animated_visibility.append(transform)\n            \n    \n    # Manage Strings\n    cancel_message = 'Ignore Issue'\n    buttons_to_add = []\n    \n    if len(objects_hidden) == 1:\n        patch_message_warning = str(len(objects_hidden)) + ' object is hidden.\\n'\n    else:\n        patch_message_warning = str(len(objects_hidden)) + ' objects are hidden.\\n'\n    \n    if len(objects_animated_visibility) == 1:\n        patch_message_error = str(len(objects_animated_visibility)) + ' object with animated visibility.\\n'\n    else:\n        patch_message_error = str(len(objects_animated_visibility)) + ' objects with animated visibility.\\n'\n        \n    # Manage Message\n    patch_message = ''\n            \n    if len(objects_hidden) != 0 and len(objects_animated_visibility) == 0:\n        cmds.text(\"output_\" + item_id, e=True, l='[ ' + str(len(objects_hidden)) + ' ]' )\n        patch_message = patch_message_warning\n        cancel_message = 'Ignore Warning'\n        buttons_to_add.append('Select Hidden Objects')\n    elif len(objects_hidden) == 0:\n        cmds.text(\"output_\" + item_id, e=True, l=str(len(objects_animated_visibility)))\n        patch_message = patch_message_error\n        buttons_to_add.append('Select Objects With Animated Visibility')\n    else:\n        cmds.text(\"output_\" + item_id, e=True, l=str(len(objects_animated_visibility)) + ' + [ ' + str(len(objects_hidden)) + ' ]' )\n        patch_message = patch_message_error + '\\n\\n' + patch_message_warning\n        return_message = patch_message_error + '\\n' + patch_message_warning\n        buttons_to_add.append('Select Hidden Objects')\n        buttons_to_add.append('Select Objects With Animated Visibility')\n    \n    assembled_message = ['OK']\n    assembled_message.extend(buttons_to_add)\n    assembled_message.append(cancel_message)\n    \n    # Manage State\n    if len(objects_hidden) != 0 and len(objects_animated_visibility) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=warning_color, l= '', c=lambda args: warning_animated_visibility()) \n        issues_found = 0\n    elif len(objects_animated_visibility) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('No objects with animated visibility or hidden.')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_animated_visibility())\n        issues_found = len(objects_animated_visibility)\n    \n        \n    # Patch Function ----------------------\n    def warning_animated_visibility():\n        user_input = cmds.confirmDialog(\n                    title= item_name,\n                    message= patch_message,\n                    button= assembled_message,\n                    defaultButton='OK',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"warning\")\n                    \n        if user_input == 'Select Objects With Animated Visibility':\n            cmds.select(objects_animated_visibility)\n        elif user_input == 'Select Hidden Objects':\n            cmds.select(objects_hidden)\n        elif user_input == 'Ignore Warning':\n            cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '')\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n        \n    # Return string for report ------------\n    issue_string = \"issues\"\n    if issues_found == 1:\n        issue_string = \"issue\"\n    if issues_found > 0 or len(objects_hidden) > 0:\n        string_status = str(issues_found) + ' ' + issue_string + ' found.\\n'\n        for obj in objects_animated_visibility: \n            string_status = string_status + '\"' + obj +  '\" has animated visibility.\\n'\n        if len(objects_animated_visibility) != 0 and len(objects_hidden) == 0:\n            string_status = string_status[:-1]\n        \n        for obj in objects_hidden: \n            string_status = string_status + '\"' + obj +  '\" is hidden.\\n'\n        if len(objects_hidden) != 0:\n            string_status = string_status[:-1]\n    else: \n        string_status = str(issues_found) + ' issues found. No unnamed objects were found, well done!'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n    \n    \n    \n\n# Item 19 - Non Deformer History =========================================================================\ndef check_non_deformer_history():\n    item_name = checklist_items.get(19)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(19)[1]\n    \n    objects_non_deformer_history = []\n    possible_objects_non_deformer_history = []\n    \n\n    objects_to_check = []\n    objects_to_check.extend(cmds.ls(typ='nurbsSurface') or [])\n    objects_to_check.extend(cmds.ls(typ='mesh') or [])\n    objects_to_check.extend(cmds.ls(typ='subdiv') or [])\n    objects_to_check.extend(cmds.ls(typ='nurbsCurve') or [])\n    \n    not_history_nodes = ['tweak', 'expression', 'unitConversion', 'time', 'objectSet', 'reference', 'polyTweak', 'blendShape', 'groupId', \\\n    'renderLayer', 'renderLayerManager', 'shadingEngine', 'displayLayer', 'skinCluster', 'groupParts', 'mentalraySubdivApprox', 'proximityWrap',\\\n    'cluster', 'cMuscleSystem', 'timeToUnitConversion', 'deltaMush', 'tension', 'wire', 'wrinkle', 'softMod', 'jiggle', 'diskCache', 'leastSquaresModifier']\n    \n    possible_not_history_nodes = ['nonLinear','ffd', 'curveWarp', 'wrap', 'shrinkWrap', 'sculpt', 'textureDeformer']\n    \n    # Find Offenders\n    for obj in objects_to_check:\n        history = cmds.listHistory(obj, pdo=1) or []\n        #Convert to string?\n        for node in history:\n            if cmds.nodeType(node) not in not_history_nodes and cmds.nodeType(node) not in possible_not_history_nodes:\n                if obj not in objects_non_deformer_history:\n                    objects_non_deformer_history.append(obj)\n            if cmds.nodeType(node) in possible_not_history_nodes:\n                if obj not in possible_objects_non_deformer_history:\n                    possible_objects_non_deformer_history.append(obj)\n\n\n    # Manage Strings\n    cancel_message = 'Ignore Issue'\n    buttons_to_add = []\n    \n    if len(possible_objects_non_deformer_history) == 1:\n        patch_message_warning = str(len(possible_objects_non_deformer_history)) + ' object contains deformers often used for modeling.\\n'\n    else:\n        patch_message_warning = str(len(possible_objects_non_deformer_history)) + ' objects contain deformers often used for modeling.\\n'\n    \n    if len(objects_non_deformer_history) == 1:\n        patch_message_error = str(len(objects_non_deformer_history)) + ' object contains non-deformer history.\\n'\n    else:\n        patch_message_error = str(len(objects_non_deformer_history)) + ' objects contain non-deformer history.\\n'\n        \n    # Manage Message\n    patch_message = ''\n            \n    if len(possible_objects_non_deformer_history) != 0 and len(objects_non_deformer_history) == 0:\n        cmds.text(\"output_\" + item_id, e=True, l='[ ' + str(len(possible_objects_non_deformer_history)) + ' ]' )\n        patch_message = patch_message_warning\n        cancel_message = 'Ignore Warning'\n        buttons_to_add.append('Select Objects With Suspicious Deformers')\n    elif len(possible_objects_non_deformer_history) == 0:\n        cmds.text(\"output_\" + item_id, e=True, l=str(len(objects_non_deformer_history)))\n        patch_message = patch_message_error\n        buttons_to_add.append('Select Objects With Non-deformer History')\n    else:\n        cmds.text(\"output_\" + item_id, e=True, l=str(len(objects_non_deformer_history)) + ' + [ ' + str(len(possible_objects_non_deformer_history)) + ' ]' )\n        patch_message = patch_message_error + '\\n\\n' + patch_message_warning\n        return_message = patch_message_error + '\\n' + patch_message_warning\n        buttons_to_add.append('Select Objects With Suspicious Deformers')\n        buttons_to_add.append('Select Objects With Non-deformer History')\n    \n    assembled_message = ['OK']\n    assembled_message.extend(buttons_to_add)\n    assembled_message.append(cancel_message)\n    \n    # Manage State\n    if len(possible_objects_non_deformer_history) != 0 and len(objects_non_deformer_history) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=warning_color, l= '', c=lambda args: warning_non_deformer_history()) \n        issues_found = 0\n    elif len(objects_non_deformer_history) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('No objects with non-deformer history were found.')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_non_deformer_history())\n        issues_found = len(objects_non_deformer_history)\n\n    # Patch Function ----------------------\n    def warning_non_deformer_history():\n        user_input = cmds.confirmDialog(\n                    title= item_name,\n                    message= patch_message,\n                    button= assembled_message,\n                    defaultButton='OK',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"warning\")\n                    \n        if user_input == 'Select Objects With Non-deformer History':\n            cmds.select(objects_non_deformer_history)\n        elif user_input == 'Select Objects With Suspicious Deformers':\n            cmds.select(possible_objects_non_deformer_history)\n        elif user_input == 'Ignore Warning':\n            cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '')\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    issue_string = \"issues\"\n    if issues_found == 1:\n        issue_string = \"issue\"\n    if issues_found > 0 or len(possible_objects_non_deformer_history) > 0:\n        string_status = str(issues_found) + ' ' + issue_string + ' found.\\n'\n        for obj in objects_non_deformer_history: \n            string_status = string_status + '\"' + obj +  '\" contains non-deformer history.\\n'\n        if len(objects_non_deformer_history) != 0 and len(possible_objects_non_deformer_history) == 0:\n            string_status = string_status[:-1]\n        \n        for obj in possible_objects_non_deformer_history: \n            string_status = string_status + '\"' + obj +  '\" contains deformers often used for modeling.\\n'\n        if len(possible_objects_non_deformer_history) != 0:\n            string_status = string_status[:-1]\n    else: \n        string_status = str(issues_found) + ' issues found. No objects with non-deformer history!'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n    \n    \n# Item 20 - Textures Color Space =========================================================================\ndef check_textures_color_space():\n    item_name = checklist_items.get(20)[0]\n    item_id = item_name.lower().replace(\" \",\"_\").replace(\"-\",\"_\")\n    expected_value = checklist_items.get(20)[1]\n    \n    objects_wrong_color_space = []\n    possible_objects_wrong_color_space = []\n    \n    # These types return an error instead of warning\n    error_types = ['RedshiftMaterial','RedshiftArchitectural', 'RedshiftDisplacement', 'RedshiftColorCorrection', 'RedshiftBumpMap', 'RedshiftSkin', 'RedshiftSubSurfaceScatter',\\\n    'aiStandardSurface', 'aiFlat', 'aiCarPaint', 'aiBump2d', '', 'aiToon', 'aiBump3d', 'aiAmbientOcclusion', 'displacementShader']\n        \n    # If type starts with any of these strings it will be tested\n    check_types = ['Redshift', 'ai', 'lambert', 'blinn', 'phong', 'useBackground', 'checker', 'ramp', 'volumeShader', 'displacementShader', 'anisotropic', 'bump2d'] \n    \n    # These types and connections are allowed to be float3 even though it's raw\n    float3_to_float_exceptions = {'RedshiftBumpMap': 'input',\n                                  'RedshiftDisplacement':'texMap'}\n\n    # Count Textures\n    all_file_nodes = cmds.ls(type=\"file\")\n    for file in all_file_nodes:\n        color_space = cmds.getAttr(file + '.colorSpace')\n        \n        has_suspicious_connection = False\n        has_error_node_type = False\n        \n        intput_node_connections = cmds.listConnections(file, destination=True, source=False, plugs=True) or []\n        \n        suspicious_connections = []\n        possible_suspicious_connections = []\n        \n        if color_space.lower() == 'Raw'.lower():\n            for in_con in intput_node_connections:\n                node = in_con.split('.')[0]\n                node_in_con = in_con.split('.')[1]\n                \n                node_type = cmds.objectType(node)\n                \n                if node_type in error_types:\n                    has_error_node_type = True\n                \n                should_be_checked = False\n                for types in check_types:\n                    if node_type.startswith(types):\n                        should_be_checked = True\n                \n                if should_be_checked:\n                    data_type = cmds.getAttr(in_con, type=True)\n                    if data_type == 'float3' and (node_type in float3_to_float_exceptions and node_in_con in float3_to_float_exceptions.values()) == False:\n                            has_suspicious_connection = True\n                            suspicious_connections.append(in_con)\n        \n        if color_space.lower() == 'sRGB'.lower():\n            for in_con in intput_node_connections:\n                node = in_con.split('.')[0]\n                node_in_con = in_con.split('.')[1]\n                \n                node_type = cmds.objectType(node)\n                \n                if node_type in error_types:\n                    has_error_node_type = True\n                \n                should_be_checked = False\n                for types in check_types:\n                    if node_type.startswith(types):\n                        should_be_checked = True\n                \n                if should_be_checked:\n                    data_type = cmds.getAttr(in_con, type=True)\n                    if data_type == 'float':\n                            has_suspicious_connection = True\n                            suspicious_connections.append(in_con)\n                    if node_type in float3_to_float_exceptions and node_in_con in float3_to_float_exceptions.values():\n                            has_suspicious_connection = True\n                            suspicious_connections.append(in_con)\n                  \n        if has_suspicious_connection:\n            if has_error_node_type:\n                objects_wrong_color_space.append([file,suspicious_connections])\n            else:\n                possible_objects_wrong_color_space.append([file,suspicious_connections])\n           \n    \n    # Manage Strings\n    cancel_message = 'Ignore Issue'\n    buttons_to_add = []\n    bottom_message = '\\n\\n (For a complete list, generate a full report)'\n    \n    if len(possible_objects_wrong_color_space) == 1:\n        patch_message_warning = str(len(possible_objects_wrong_color_space)) + ' file node is using a color space that might not be appropriate for its connection.\\n'\n    else:\n        patch_message_warning = str(len(possible_objects_wrong_color_space)) + ' file nodes are using a color space that might not be appropriate for its connection.\\n'\n    \n    if len(objects_wrong_color_space) == 1:\n        patch_message_error = str(len(objects_wrong_color_space)) + ' file node is using a color space that is not appropriate for its connection.\\n'\n    else:\n        patch_message_error = str(len(objects_wrong_color_space)) + ' file nodes are using a color space that is not appropriate for its connection.\\n'\n        \n    \n    # Manage Messages\n    patch_message = ''\n    might_have_issues_message = 'Select File Nodes With Possible Issues'\n    has_issues_message = 'Select File Nodes With Issues'\n            \n    if len(possible_objects_wrong_color_space) != 0 and len(objects_wrong_color_space) == 0:\n        cmds.text(\"output_\" + item_id, e=True, l='[ ' + str(len(possible_objects_wrong_color_space)) + ' ]' )\n        patch_message = patch_message_warning\n        cancel_message = 'Ignore Warning'\n        buttons_to_add.append(might_have_issues_message)\n    elif len(possible_objects_wrong_color_space) == 0:\n        cmds.text(\"output_\" + item_id, e=True, l=str(len(objects_wrong_color_space)))\n        patch_message = patch_message_error\n        buttons_to_add.append(has_issues_message)\n    else:\n        cmds.text(\"output_\" + item_id, e=True, l=str(len(objects_wrong_color_space)) + ' + [ ' + str(len(possible_objects_wrong_color_space)) + ' ]' )\n        patch_message = patch_message_error + '\\n\\n' + patch_message_warning\n        return_message = patch_message_error + '\\n' + patch_message_warning\n        buttons_to_add.append(might_have_issues_message)\n        buttons_to_add.append(has_issues_message)\n    \n    assembled_message = ['OK']\n    assembled_message.extend(buttons_to_add)\n    assembled_message.append(cancel_message)\n    \n    # Manage State\n    if len(possible_objects_wrong_color_space) != 0 and len(objects_wrong_color_space) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=warning_color, l= '', c=lambda args: warning_non_deformer_history()) \n        issues_found = 0\n    elif len(objects_wrong_color_space) == 0:\n        cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '', c=lambda args: print_message('No color space issues were found.')) \n        issues_found = 0\n    else: \n        cmds.button(\"status_\" + item_id, e=True, bgc=error_color, l= '?', c=lambda args: warning_non_deformer_history())\n        issues_found = len(objects_wrong_color_space)\n\n    # Patch Function ----------------------\n    def warning_non_deformer_history():\n        user_input = cmds.confirmDialog(\n                    title= item_name,\n                    message= patch_message + bottom_message,\n                    button= assembled_message,\n                    defaultButton='OK',\n                    cancelButton='Ignore Issue',\n                    dismissString='Ignore Issue', \n                    icon=\"warning\")\n                    \n        if user_input == has_issues_message:\n            cmds.select(clear=True)\n            for obj in objects_wrong_color_space:\n                cmds.select(obj[0], add=True)\n        elif user_input == might_have_issues_message:\n            cmds.select(clear=True)\n            for obj in possible_objects_wrong_color_space:\n                cmds.select(obj[0], add=True)\n        elif user_input == 'Ignore Warning':\n            cmds.button(\"status_\" + item_id, e=True, bgc=pass_color, l= '')\n        else:\n            cmds.button(\"status_\" + item_id, e=True, l= '')\n    \n    # Return string for report ------------\n    issue_string = \"issues\"\n    if issues_found == 1:\n        issue_string = \"issue\"\n    if issues_found > 0 or len(possible_objects_wrong_color_space) > 0:\n        string_status = str(issues_found) + ' ' + issue_string + ' found.\\n'\n        for obj in objects_wrong_color_space: \n            string_status = string_status + '\"' + obj[0] +  '\" is using a color space (' + cmds.getAttr(obj[0] + '.colorSpace') + ') that is not appropriate for its connection.\\n' \n            for connection in obj[1]:\n                string_status = string_status + '   \"' + connection + '\" triggered this error.\\n'\n        if len(objects_wrong_color_space) != 0 and len(possible_objects_wrong_color_space) == 0:\n            string_status = string_status[:-1]\n        \n        for obj in possible_objects_wrong_color_space: \n            string_status = string_status + '\"' + obj[0] +  '\" might be using a color space (' + cmds.getAttr(obj[0] + '.colorSpace') + ') that is not appropriate for its connection.\\n'\n            for connection in obj[1]:\n                string_status = string_status + '   \"' + connection + '\" triggered this warning.\\n'\n        if len(possible_objects_wrong_color_space) != 0:\n            string_status = string_status[:-1]\n    else: \n        string_status = str(issues_found) + ' issues found. No color space issues were found!'\n    return '\\n*** ' + item_name + \" ***\\n\" + string_status\n\n    \n# Checklist Functions End Here ===================================================================\n\n\ndef print_message(message, as_warning=False, as_heads_up_message=False):\n    \n\n    if as_warning:\n        cmds.warning(message)\n    elif as_heads_up_message:\n        cmds.headsUpMessage(message, verticalOffset=150 , time=5.0)\n    else:\n        print(message)\n\n\ndef settings_apply_changes(reset_default=False):\n    \n    settings_buffer = checklist_settings.get('settings_text_fields')\n    \n    # Resetting Fields\n    if reset_default:\n        for item in settings_buffer:\n            stored_value = cmds.textField(item, q=True, text=True)\n            \n            if 'settings_warning_' in item:\n                item_id = int(item.replace('settings_warning_', ''))\n                \n                cmds.textField(item, e=True, text=settings_default_checklist_values.get(item_id)[1][0] )\n                \n                \n            if 'settings_list_error_' in item:\n                item_id = int(item.replace('settings_list_error_', ''))\n                \n                combined_values = ''\n                for array_item in settings_default_checklist_values.get(item_id)[1]:\n                    combined_values = str(combined_values) + str(array_item) + ', ' \n                    \n                if len(settings_default_checklist_values.get(item_id)[1]) > 0:\n                    combined_values = combined_values[:-2]\n                    \n                cmds.textField(item, e=True, text=combined_values )\n                \n            if 'settings_1d_error_' in item:\n                item_id = int(item.replace('settings_1d_error_', ''))\n                \n                cmds.textField(item, e=True, text=settings_default_checklist_values.get(item_id)[1] )\n\n                \n            if 'settings_2d_error_' in item:\n                item_id = int(item.replace('settings_2d_error_', ''))\n                \n                cmds.textField(item, e=True, text=settings_default_checklist_values.get(item_id)[1][1] )\n    \n    \n    # Writting / Applying\n    for item in settings_buffer:\n        stored_value = cmds.textField(item, q=True, text=True)\n        \n        if 'settings_warning_' in item:\n            item_id = item.replace('settings_warning_', '')\n            if stored_value.isdigit():\n                checklist_items[int(item_id)][1][0] = int(stored_value)\n            else:\n                checklist_items[int(item_id)][1][0] = stored_value\n            \n        if 'settings_list_error_' in item:\n            item_id = item.replace('settings_list_error_', '')\n            return_list = []\n            value_as_list = stored_value.replace(' ','').split(',')\n            # Convert to number if possible\n            for obj in value_as_list:\n                if obj.isdigit():\n                    return_list.append(int(obj))\n                else:\n                    return_list.append(obj)\n            checklist_items[int(item_id)][1] = return_list\n            \n        if 'settings_1d_error_' in item:\n            item_id = item.replace('settings_1d_error_', '')\n            if stored_value.isdigit():\n                checklist_items[int(item_id)][1] = int(stored_value)\n            else:\n                checklist_items[int(item_id)][1] = stored_value\n            \n        if 'settings_2d_error_' in item:\n            item_id = item.replace('settings_2d_error_', '')\n            if stored_value.isdigit():\n                checklist_items[int(item_id)][1][1] = int(stored_value)\n            else:\n                checklist_items[int(item_id)][1][1] = stored_value\n                    \n# Used to Export Full Report:\ndef export_report_to_txt(list):\n    tempDir = cmds.internalVar(userTmpDir=True)\n    txtFile = tempDir+'tmp.txt';\n    \n    f = open(txtFile,'w')\n    \n    output_string = script_name + \" Full Report:\\n\"\n    \n    for obj in list:\n        output_string = output_string + obj + \"\\n\\n\"\n    \n    f.write(output_string)\n    f.close()\n\n    notepadCommand = 'exec(\"notepad ' + txtFile + '\");'\n    mel.eval(notepadCommand)\n\n# Import Settings\ndef settings_import_state():\n    \n    file_name = cmds.fileDialog2(fileFilter=script_name + \" Settings (*.txt)\", dialogStyle=2, fileMode= 1, okCaption= 'Import', caption= 'Importing Settings for \"' + script_name + '\"') or []\n    \n    if len(file_name) > 0:\n        settings_file = file_name[0]\n        file_exists = True\n    else:\n        file_exists = False\n    \n    if file_exists:\n        try: \n            file_handle = open(settings_file,'r')\n        except:\n            file_exists = False\n            cmds.warning('Couldn\\'t read the file. Please make sure the selected file is accessible.')\n    \n    if file_exists:\n        read_string = file_handle.read()\n\n        imported_settings = read_string.split('\\n')\n        \n        settings_buffer = checklist_settings.get('settings_text_fields')\n        for txtfield in settings_buffer:\n            for value in imported_settings:\n                extracted_values = value.split(':\"')\n                if len(extracted_values) > 1:\n                    cmds.textField(extracted_values[0], e=True, text=extracted_values[1].replace('\"','') )\n                \n\n# Export Settings\ndef settings_export_state():\n    \n    file_name = cmds.fileDialog2(fileFilter=script_name + \" Settings (*.txt)\", dialogStyle=2, okCaption= 'Export', caption= 'Exporting Settings for \"' + script_name + '\"') or []\n    \n    if len(file_name) > 0:\n        settings_file = file_name[0]\n        successfully_created_file = True\n    else:\n        successfully_created_file = False\n\n    if successfully_created_file:\n        try: \n            file_handle = open(settings_file,'w')\n        except:\n            successfully_created_file = False\n            cmds.warning('Couldn\\'t write to file. Please make sure the saving location is accessible.')\n \n    if successfully_created_file:\n        settings_name_value = []\n        settings_buffer = checklist_settings.get('settings_text_fields')\n        \n        for stx in settings_buffer:\n            stored_value = cmds.textField(stx, q=True, text=True)\n            settings_name_value.append(str(stx) + ':\"' + str(stored_value) + '\"')\n\n        output_string = script_name + ':\\n'\n        \n        for line in settings_name_value:\n            output_string = output_string + line + \"\\n\"\n        \n        file_handle.write(output_string)\n        file_handle.close()\n        print('File exported to \"' + settings_file + '\"')\n\n\n#Build GUI\nbuild_gui_gt_render_checklist()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
